import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class ConfigLoader {

    private static final String FILE_PATH = "test/resources/env/config/uat.properties";

    public static Properties loadProperties() {
        Properties properties = new Properties();
        try (InputStream inputStream = new FileInputStream(FILE_PATH)) {
            properties.load(inputStream);
        } catch (IOException e) {
            throw new RuntimeException("‚ùå B≈ÇƒÖd podczas ≈Çadowania pliku: " + FILE_PATH, e);
        }
        return properties;
    }

    public static String getProperty(String key) {
        return loadProperties().getProperty(key);
    }
}
Below you will find links to two repositories, abd and def, dedicated to automated testing. Each framework includes a pipeline configuration that enables tests to be executed daily according to a predefined schedule. After the tests are completed, a test report is generated, and an email is sent to a defined group of recipients.

I have added you to the recipient list, and the email will be sent at approximately 6 AM UTC-0.


public class ConfigLoader {

    private static final String FILE_PATH = "env/config/uat.properties";

    public static Properties loadProperties() {
        Properties properties = new Properties();
        try (InputStream inputStream = ConfigLoader.class.getClassLoader().getResourceAsStream(FILE_PATH)) {
            if (inputStream == null) {
                throw new IOException("Plik " + FILE_PATH + " nie zosta≈Ç znaleziony!");
            }
            properties.load(inputStream);
        } catch (IOException e) {
            throw new RuntimeException("‚ùå B≈ÇƒÖd podczas ≈Çadowania pliku: " + FILE_PATH, e);
        }
        return properties;
    }
}




import com.github.wnameless.json.flattener.JsonFlattener;
import java.util.Map;

public class JsonDiffFlattener {
    public static void main(String[] args) {
        String json1 = "{ \"user\": { \"name\": \"John\", \"age\": 30 }, \"city\": \"New York\" }";
        String json2 = "{ \"user\": { \"name\": \"John\", \"age\": 25 }, \"city\": \"Los Angeles\" }";

        Map<String, Object> flatJson1 = JsonFlattener.flattenAsMap(json1);
        Map<String, Object> flatJson2 = JsonFlattener.flattenAsMap(json2);

        for (String key : flatJson1.keySet()) {
            Object value1 = flatJson1.get(key);
            Object value2 = flatJson2.get(key);

            if (value2 == null) {
                System.out.println("üö® Brak klucza w drugim JSON: " + key);
            } else if (!value1.equals(value2)) {
                System.out.println("üîç R√≥≈ºnica w '" + key + "': Oczekiwano: " + value1 + ", Otrzymano: " + value2);
            }
        }
    }
}




debug_job:
  stage: debug
  script:
    - echo "üîç Sprawdzam katalog PWB_Files..."
    - ls -la "$CI_PROJECT_DIR" || echo "‚ö† Katalog g≈Ç√≥wny nie istnieje!"
    - ls -la "$CI_PROJECT_DIR/PWB_Files" || echo "‚ö† Katalog PWB_Files nie istnieje!"


before_script:
  - mkdir -p "$CI_PROJECT_DIR/PWB_Files"


debug:
  stage: debug
  script:
    - ls -la "$CI_PROJECT_DIR/PWB_files"



before_script:
  - git config --global user.name "GitLab CI"
  - git config --global user.email "ci@example.com"
  - git config --global --unset core.excludesfile || true
  - git config --global --unset credential.helper || true
  - git config --global --unset core.safecrlf || true





