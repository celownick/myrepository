public class LatestLogFinder {

    /**
     * Znajduje najnowszy plik w katalogu, który zawiera określony fragment nazwy i kończy się na "_out".
     *
     * @param directoryPath ścieżka do katalogu, w którym szukamy plików
     * @param keyword       fragment nazwy pliku, który ma być zawarty w wyniku (np. "def")
     * @return Nazwa najnowszego pliku spełniającego kryteria lub null, jeśli żaden plik nie pasuje
     */
    public static String findLatestLogFile(String directoryPath, String keyword) {
        File dir = new File(directoryPath);

        // Sprawdzenie, czy katalog istnieje i jest folderem
        if (!dir.exists() || !dir.isDirectory()) {
            throw new IllegalArgumentException("Podana ścieżka nie istnieje lub nie jest katalogiem: " + directoryPath);
        }

        // Pobranie wszystkich plików, które spełniają kryteria (zawierają keyword i kończą się na "_out")
        File[] matchingFiles = dir.listFiles(file ->
                file.isFile() &&                         // Tylko pliki (ignorujemy foldery)
                file.getName().contains(keyword) &&     // Musi zawierać przekazany keyword
                file.getName().endsWith("_out")         // Musi kończyć się na "_out"
        );

        // Jeśli brak pasujących plików, zwracamy null
        if (matchingFiles == null || matchingFiles.length == 0) {
            return null;
        }

        // Znalezienie pliku z najnowszą datą modyfikacji
        Optional<File> latestFile = Arrays.stream(matchingFiles)
                .max(Comparator.comparingLong(File::lastModified));

        return latestFile.map(File::getName).orElse(null);
    }
