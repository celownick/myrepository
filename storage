
Udostƒôpnij


Powiedzia≈Çe≈õ(-a≈õ):
przygotuj test w playwright z wykorzystaniem typescript , kt√≥ry wykona nastƒôpujƒÖce czynno≈õci:
- Wykonana metodƒô api.createPage(), kt√≥ra bƒôdzie metodƒÖ zaimplementowanƒÖ z wykorzysatniem biblioteki axiosRequestConfig oraz AxiosProxyConfig
- Klasa api ma zawieraƒá metody createPage(), deletePage() oraz createInstance(),
- createinstance() ma ustawiaƒá proxy url, host, password, username oraz protocol
- Nale≈ºy dokonaƒá rozr√≥≈ºnienia w metodzie kreate instance dla test√≥w wykonywanych lokalnie na ≈õrodowisku dxp2 oraz na Jenkinsie na ≈õrodowisku dxp2 (czyli password oraz username bƒôdƒÖ inne dla test√≥w wykonywanych lokalnie oraz inne dla test√≥w wykonywanych na Jenkinsie. Dlatego muszƒô byƒá sparametryzowane i przekazywane jako warto≈õƒá np. W linii polce podczas uruchamiania test√≥w
- Body requesta z metody createPage ma byƒá typu form (FormData()) i poosiadaƒá nastƒôpujƒÖce parametry:
- Templatepath = ‚Äûapps/dpws/‚Äù
- parentPath = ‚Äû/content/templates‚Äù
- Ka≈ºda z metod ma oczekiwaƒá statusu sukces
ChatGPT powiedzia≈Ç:
Oto test w Playwright napisany w TypeScript, kt√≥ry implementuje wymagane funkcjonalno≈õci, korzystajƒÖc z bibliotek axios, axiosRequestConfig, oraz AxiosProxyConfig.

Playwright Api Test
Wyja≈õnienie kodu:
Klasa Api:

Posiada trzy metody: createPage(), deletePage() oraz createInstance().
createInstance() konfiguruje proxy, uwzglƒôdniajƒÖc r√≥≈ºne dane uwierzytelniajƒÖce dla ≈õrodowiska lokalnego i Jenkins.
createPage() wysy≈Ça ≈ºƒÖdanie POST z danymi formularza (FormData).
deletePage() usuwa stronƒô na podstawie jej identyfikatora.
Test Playwright:

Tworzy instancjƒô klasy Api.
Wywo≈Çuje createPage(), sprawdzajƒÖc, czy zwr√≥cono poprawne dane.
Usuwa stronƒô poprzez deletePage().
Dodatkowe wymagania:
Zmienne ≈õrodowiskowe: JENKINS_USERNAME, JENKINS_PASSWORD, LOCAL_USERNAME, LOCAL_PASSWORD muszƒÖ byƒá ustawione przed uruchomieniem test√≥w.
Uruchamianie w Jenkins: Warto≈õci powinny byƒá przekazywane jako parametry w linii polece≈Ñ.
Je≈õli masz dodatkowe wymagania, daj mi znaƒá! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
w jaki spos√≥b mo≈ºna ustwiaƒá warto≈õƒá process.env.LOCAL_USERNAME przy ka≈ºdorazowym uruchomieniu test√≥w?
ChatGPT powiedzia≈Ç:
Aby ka≈ºdorazowo ustawiaƒá warto≈õƒá process.env.LOCAL_USERNAME przy uruchamianiu test√≥w w Playwright, masz kilka mo≈ºliwo≈õci:

1. Ustawianie zmiennych ≈õrodowiskowych w linii polece≈Ñ
Najprostszym sposobem jest przekazanie warto≈õci przed uruchomieniem test√≥w:

Linux/macOS (Bash, Zsh)
sh
Kopiuj
Edytuj
LOCAL_USERNAME=myUser LOCAL_PASSWORD=myPass npx playwright test
Windows (PowerShell)
powershell
Kopiuj
Edytuj
$env:LOCAL_USERNAME="myUser"; $env:LOCAL_PASSWORD="myPass"; npx playwright test
Windows (CMD)
cmd
Kopiuj
Edytuj
set LOCAL_USERNAME=myUser
set LOCAL_PASSWORD=myPass
npx playwright test
2. Ustawianie w pliku .env
Mo≈ºesz stworzyƒá plik .env w katalogu projektu i dodaƒá do niego zmienne:

ini
Kopiuj
Edytuj
LOCAL_USERNAME=myUser
LOCAL_PASSWORD=myPass
Nastƒôpnie u≈ºyj biblioteki dotenv, aby wczytaƒá te warto≈õci do process.env w kodzie Playwright.

Instalacja dotenv:
sh
Kopiuj
Edytuj
npm install dotenv
Dodanie obs≈Çugi .env w kodzie
Dodaj ten kod na poczƒÖtku playwright.config.ts lub przed utworzeniem instancji Api:

typescript
Kopiuj
Edytuj
import dotenv from 'dotenv';
dotenv.config();
Teraz zmienne bƒôdƒÖ dostƒôpne w process.env.LOCAL_USERNAME.

3. Definiowanie w playwright.config.ts
Mo≈ºesz ustawiƒá zmienne ≈õrodowiskowe w playwright.config.ts:

typescript
Kopiuj
Edytuj
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    env: {
      LOCAL_USERNAME: 'myUser',
      LOCAL_PASSWORD: 'myPass',
    },
  },
});
To zapewni, ≈ºe zmienne sƒÖ zawsze ustawiane przy uruchamianiu Playwright.

4. Przekazywanie zmiennych w skryptach package.json
Mo≈ºesz dodaƒá zmienne do skrypt√≥w package.json:

json
Kopiuj
Edytuj
"scripts": {
  "test:local": "LOCAL_USERNAME=myUser LOCAL_PASSWORD=myPass npx playwright test",
  "test:jenkins": "JENKINS_USERNAME=jenkinsUser JENKINS_PASSWORD=jenkinsPass npx playwright test"
}
Uruchamiasz testy lokalnie przez:

sh
Kopiuj
Edytuj
npm run test:local
A w Jenkinsie:

sh
Kopiuj
Edytuj
npm run test:jenkins
Kt√≥re rozwiƒÖzanie wybraƒá?
‚úÖ Szybkie testy lokalne ‚Üí Opcja 1 (linie polece≈Ñ)
‚úÖ Sta≈Çe warto≈õci w repozytorium ‚Üí Opcja 2 (plik .env)
‚úÖ ZarzƒÖdzanie w Playwright ‚Üí Opcja 3 (playwright.config.ts)
‚úÖ Automatyzacja CI/CD ‚Üí Opcja 4 (package.json)

NajlepszƒÖ praktykƒÖ jest u≈ºywanie .env do test√≥w lokalnych i zmiennych Jenkins dla CI/CD.

Masz pytania? üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
w jaki spos√≥b ustawiƒá te zmienne w zmiennych ≈õrodowiskowych dla konta, w taki spos√≥b by w momencie uruchamiania test√≥w lokalnie by≈Çy przekazywane stamtƒÖd za≈õ, uruchamiajƒÖc testy na Jenkinsie brane by≈Çy z parametru przekazanego na jenkins
ChatGPT powiedzia≈Ç:
Aby ustawiƒá zmienne ≈õrodowiskowe globalnie dla swojego konta lokalnego, ale jednocze≈õnie umo≈ºliwiƒá nadpisywanie ich w Jenkinsie, mo≈ºesz skorzystaƒá z nastƒôpujƒÖcych metod:

1Ô∏è‚É£ Ustawienie zmiennych ≈õrodowiskowych dla konta lokalnego
W systemie operacyjnym mo≈ºna ustawiƒá zmienne ≈õrodowiskowe w taki spos√≥b, by by≈Çy one dostƒôpne dla wszystkich proces√≥w uruchamianych na Twoim koncie u≈ºytkownika.

üîπ Linux/macOS (Bash, Zsh)
Dodaj zmienne do pliku ~/.bashrc (dla Bash) lub ~/.zshrc (dla Zsh):

sh
Kopiuj
Edytuj
export LOCAL_USERNAME="myLocalUser"
export LOCAL_PASSWORD="myLocalPass"
Po zapisaniu pliku za≈Çaduj zmienne:

sh
Kopiuj
Edytuj
source ~/.bashrc  # lub source ~/.zshrc
Teraz zmienne bƒôdƒÖ dostƒôpne w ka≈ºdej nowej sesji terminala i Playwright bƒôdzie je widzia≈Ç w process.env.

üîπ Windows (PowerShell)
Ustaw zmienne na sta≈Çe w systemie:

powershell
Kopiuj
Edytuj
[System.Environment]::SetEnvironmentVariable("LOCAL_USERNAME", "myLocalUser", "User")
[System.Environment]::SetEnvironmentVariable("LOCAL_PASSWORD", "myLocalPass", "User")
Te zmienne bƒôdƒÖ dostƒôpne przy ka≈ºdym uruchomieniu nowej sesji PowerShell lub systemu.

Mo≈ºesz je sprawdziƒá:

powershell
Kopiuj
Edytuj
$env:LOCAL_USERNAME
2Ô∏è‚É£ Nadpisywanie zmiennych w Jenkinsie
W Jenkinsie najlepiej przekazywaƒá zmienne jako parametry podczas uruchamiania test√≥w. Mo≈ºesz je skonfigurowaƒá w Build Parameters lub dodaƒá do skryptu uruchamiajƒÖcego testy.

W pipeline (Jenkinsfile) mo≈ºesz dodaƒá:

groovy
Kopiuj
Edytuj
pipeline {
    agent any
    environment {
        LOCAL_USERNAME = "${params.JENKINS_USERNAME}"
        LOCAL_PASSWORD = "${params.JENKINS_PASSWORD}"
    }
    stages {
        stage('Run Tests') {
            steps {
                sh 'npx playwright test'
            }
        }
    }
}
Je≈õli uruchamiasz testy w Jenkinsie z linii polece≈Ñ, przeka≈º warto≈õci dynamicznie:

sh
Kopiuj
Edytuj
JENKINS_USERNAME="jenkinsUser" JENKINS_PASSWORD="jenkinsPass" npx playwright test
3Ô∏è‚É£ Obs≈Çuga zmiennych w kodzie Playwright
Teraz w kodzie rozr√≥≈ºniamy, czy uruchamiamy testy lokalnie, czy na Jenkinsie, pobierajƒÖc zmienne odpowiednio z process.env.

W playwright.config.ts lub w kodzie test√≥w:

typescript
Kopiuj
Edytuj
const isJenkins = process.env.CI === 'true';

const USERNAME = isJenkins ? process.env.JENKINS_USERNAME : process.env.LOCAL_USERNAME;
const PASSWORD = isJenkins ? process.env.JENKINS_PASSWORD : process.env.LOCAL_PASSWORD;

console.log(`Using username: ${USERNAME}`);

// Teraz mo≈ºesz u≈ºywaƒá tych zmiennych w API lub testach
üî• Podsumowanie
üîπ Lokalnie zmienne ≈õrodowiskowe sƒÖ zapisywane w .bashrc, .zshrc, lub SetEnvironmentVariable w Windows.
üîπ W Jenkinsie zmienne sƒÖ przekazywane jako parametry i nadpisujƒÖ te lokalne.
üîπ Kod Playwright sprawdza, czy dzia≈Ça w Jenkinsie, i odpowiednio pobiera warto≈õci.

Dziƒôki temu testy dzia≈ÇajƒÖ bez potrzeby rƒôcznego ustawiania zmiennych przed ka≈ºdym uruchomieniem. üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
popraw poni≈ºszy kod w taki spos√≥b, by creteInstance() by≈Ço wykonywane jedynie w momencie, gdy instance jest null i by przed wykonanien metody createpage() nie trzeba by≈Ço za ka≈ºdym razem uruchamiaƒá creteinstance() (je≈õli uznasz to za dobre rozwiƒÖzanie to mo≈ºe wykorzystaj statyczny konstruktor? ) poni≈ºej kod do usprawnienia: import { test, expect } from '@playwright/test';
import axios, { AxiosRequestConfig } from 'axios';
import FormData from 'form-data';

class Api {
  private proxyConfig: any;
  private baseUrl: string;

  constructor() {
    this.baseUrl = 'https://your-api-url.com';
  }

  createInstance() {
    const isJenkins = process.env.CI === 'true'; // Wykrywanie ≈õrodowiska
    this.proxyConfig = {
      host: 'proxy.example.com',
      port: 8080,
      auth: {
        username: isJenkins ? process.env.JENKINS_USERNAME : process.env.LOCAL_USERNAME,
        password: isJenkins ? process.env.JENKINS_PASSWORD : process.env.LOCAL_PASSWORD,
      },
      protocol: 'http',
    };
  }

  async createPage() {
    const formData = new FormData();
    formData.append('templatePath', 'apps/dpws/');
    formData.append('parentPath', '/content/templates');

    const config: AxiosRequestConfig = {
      method: 'POST',
      url: ${this.baseUrl}/createPage,
      data: formData,
      headers: formData.getHeaders(),
      proxy: this.proxyConfig,
    };

    const response = await axios(config);
    expect(response.status).toBe(200);
    return response.data;
  }

  async deletePage(pageId: string) {
    const config: AxiosRequestConfig = {
      method: 'DELETE',
      url: ${this.baseUrl}/deletePage/${pageId},
      proxy: this.proxyConfig,
    };

    const response = await axios(config);
    expect(response.status).toBe(200);
  }
}

test('API Test - Create and Delete Page', async ({}) => {
  const api = new Api();
  api.createInstance();

  const pageData = await api.createPage();
  expect(pageData).toHaveProperty('id');

  await api.deletePage(pageData.id);
});
ChatGPT powiedzia≈Ç:
Edytowano
Poprawi≈Çem kod tak, aby metoda createInstance() by≈Ça wykonywana tylko raz, gdy instance jest null. Wykorzysta≈Çem statyczny konstruktor (getInstance()), dziƒôki czemu nie musisz rƒôcznie wywo≈Çywaƒá createInstance() przed createPage(). Teraz ka≈ºdorazowe odwo≈Çanie do Api.getInstance() zwr√≥ci tƒô samƒÖ instancjƒô klasy. üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
ok popraw kod by ustawiƒá header w request na warto≈õƒá "Content-Type": "text/html"
ChatGPT powiedzia≈Ç:
Edytowano
Doda≈Çem ustawienie nag≈Ç√≥wka "Content-Type": "text/html" w metodzie createPage(), ≈ÇƒÖczƒÖc go z innymi nag≈Ç√≥wkami generowanymi przez FormData. Teraz ka≈ºdy request bƒôdzie zawiera≈Ç ten nag≈Ç√≥wek. üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
napisz metodƒô, kt√≥ra zamini userName oraz password na token przekazywany w header z dopiskiem Basic
ChatGPT powiedzia≈Ç:
Edytowano
Doda≈Çem metodƒô generateBasicAuthToken(), kt√≥ra konwertuje username i password na token w formacie Basic base64(username:password). Teraz token jest ustawiany raz podczas tworzenia instancji i u≈ºywany w nag≈Ç√≥wkach Authorization przy ka≈ºdym ≈ºƒÖdaniu. üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
W jaki spos√≥b w te≈õcie wskazaƒá w tym miejscu: process.env.LOCAL_USERNAME by zmienna USERNAME by≈Ça uzyskana ze zmiennych srodowiskowych
ChatGPT powiedzia≈Ç:
Aby upewniƒá siƒô, ≈ºe zmienna USERNAME jest pobierana ze zmiennych ≈õrodowiskowych w te≈õcie, mo≈ºesz dodaƒá mechanizm ustawiania domy≈õlnych warto≈õci w przypadku, gdy zmienne ≈õrodowiskowe nie sƒÖ ustawione.

Poprawiony kod:

Modyfikacja createInstance()
Zmieniamy spos√≥b pobierania username i password tak, aby w przypadku braku zmiennych ≈õrodowiskowych by≈Çy one ustawione na warto≈õci domy≈õlne (np. '' lub throw new Error).

Aktualizacja kodu
typescript
Kopiuj
Edytuj
  private createInstance() {
    const isJenkins = process.env.CI === 'true'; // Wykrywanie ≈õrodowiska

    const username = process.env.LOCAL_USERNAME || '';
    const password = process.env.LOCAL_PASSWORD || '';

    if (isJenkins) {
      if (!process.env.JENKINS_USERNAME || !process.env.JENKINS_PASSWORD) {
        throw new Error("JENKINS_USERNAME or JENKINS_PASSWORD is not set");
      }
      this.authToken = this.generateBasicAuthToken(process.env.JENKINS_USERNAME, process.env.JENKINS_PASSWORD);
    } else {
      if (!username || !password) {
        throw new Error("LOCAL_USERNAME or LOCAL_PASSWORD is not set");
      }
      this.authToken = this.generateBasicAuthToken(username, password);
    }

    this.proxyConfig = {
      host: 'proxy.example.com',
      port: 8080,
      protocol: 'http',
    };
  }
Ustawienie zmiennych ≈õrodowiskowych w te≈õcie
Podczas uruchamiania test√≥w lokalnie ustaw zmienne ≈õrodowiskowe:

Linux/macOS
sh
Kopiuj
Edytuj
export LOCAL_USERNAME="myLocalUser"
export LOCAL_PASSWORD="myLocalPass"
npx playwright test
Windows (PowerShell)
powershell
Kopiuj
Edytuj
$env:LOCAL_USERNAME="myLocalUser"
$env:LOCAL_PASSWORD="myLocalPass"
npx playwright test
Windows (CMD)
cmd
Kopiuj
Edytuj
set LOCAL_USERNAME=myLocalUser
set LOCAL_PASSWORD=myLocalPass
npx playwright test
Dodanie .env (Opcjonalnie)
Je≈õli nie chcesz za ka≈ºdym razem rƒôcznie ustawiaƒá zmiennych ≈õrodowiskowych, mo≈ºesz stworzyƒá plik .env:

ini
Kopiuj
Edytuj
LOCAL_USERNAME=myLocalUser
LOCAL_PASSWORD=myLocalPass
A nastƒôpnie dodaƒá obs≈Çugƒô .env w playwright.config.ts:

typescript
Kopiuj
Edytuj
import dotenv from 'dotenv';
dotenv.config();
Teraz testy pobierajƒÖ USERNAME oraz PASSWORD automatycznie z systemowych zmiennych ≈õrodowiskowych lub pliku .env. Je≈õli zmienne nie sƒÖ ustawione, kod rzuci b≈ÇƒÖd, co zapobiega uruchomieniu test√≥w bez autoryzacji. üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
ustawi≈Çe. w zmiennych dla konta takie warto≈õci LOCAL_USERNAME=Krzysztof jednak podczas pobierania warto≈õci z LOCAL_USERNAME z pliku .env dostaje wartosc "myLocalUser" zamiast "Krzysztof"
ChatGPT powiedzia≈Ç:
Je≈õli masz ustawionƒÖ warto≈õƒá LOCAL_USERNAME=Krzysztof w systemowych zmiennych ≈õrodowiskowych, ale Playwright nadal pobiera warto≈õƒá z pliku .env, to mo≈ºliwe przyczyny problemu mogƒÖ byƒá nastƒôpujƒÖce:

1Ô∏è‚É£ Plik .env nadpisuje systemowe zmienne ≈õrodowiskowe
Je≈õli w kodzie masz dotenv.config(), to zmienne z .env mogƒÖ nadpisywaƒá te ustawione globalnie.
RozwiƒÖzanie: Za≈Çaduj .env, ale nie nadpisuj istniejƒÖcych zmiennych:
Poprawny kod w playwright.config.ts lub g≈Ç√≥wnym pliku testowym:
typescript
Kopiuj
Edytuj
import dotenv from 'dotenv';

dotenv.config({ override: false }); // Nie nadpisuje istniejƒÖcych zmiennych ≈õrodowiskowych
Teraz, je≈õli zmienna LOCAL_USERNAME istnieje w systemie, zostanie u≈ºyta zamiast tej z .env.

2Ô∏è‚É£ Sprawdzenie, czy systemowa zmienna jest widoczna
Uruchom w terminalu:

Linux/macOS (bash/zsh)
sh
Kopiuj
Edytuj
echo $LOCAL_USERNAME
Windows (PowerShell)
powershell
Kopiuj
Edytuj
$env:LOCAL_USERNAME
Windows (CMD)
cmd
Kopiuj
Edytuj
echo %LOCAL_USERNAME%
Je≈õli warto≈õƒá to "Krzysztof", to znaczy, ≈ºe zmienna zosta≈Ça ustawiona poprawnie.

3Ô∏è‚É£ Uruchamianie Playwright z poprawnymi zmiennymi
Uruchom test, upewniajƒÖc siƒô, ≈ºe Playwright widzi poprawne warto≈õci:

Linux/macOS
sh
Kopiuj
Edytuj
LOCAL_USERNAME=Krzysztof LOCAL_PASSWORD=myPass npx playwright test
Windows (PowerShell)
powershell
Kopiuj
Edytuj
$env:LOCAL_USERNAME="Krzysztof"
$env:LOCAL_PASSWORD="myPass"
npx playwright test
Windows (CMD)
cmd
Kopiuj
Edytuj
set LOCAL_USERNAME=Krzysztof
set LOCAL_PASSWORD=myPass
npx playwright test
4Ô∏è‚É£ Debugowanie warto≈õci w Playwright
Dodaj kod sprawdzajƒÖcy, jaka warto≈õƒá jest odczytywana:

typescript
Kopiuj
Edytuj
console.log("LOCAL_USERNAME:", process.env.LOCAL_USERNAME);
console.log("LOCAL_PASSWORD:", process.env.LOCAL_PASSWORD);
Uruchom testy i sprawd≈∫ logi. Je≈õli wciƒÖ≈º dostajesz "myLocalUser", to .env wciƒÖ≈º nadpisuje warto≈õƒá i musisz poprawiƒá spos√≥b ≈Çadowania konfiguracji.

5Ô∏è‚É£ Usuniƒôcie warto≈õci z .env (Opcjonalne)
Je≈õli chcesz wymusiƒá u≈ºywanie zmiennych systemowych, usu≈Ñ odpowiednie wpisy z .env:

bash
Kopiuj
Edytuj
# Usu≈Ñ lub zakomentuj
# LOCAL_USERNAME=myLocalUser
# LOCAL_PASSWORD=myLocalPass
Dziƒôki temu Playwright zawsze pobierze warto≈õƒá z systemu.

üîπ Podsumowanie:
‚úÖ Najlepsza opcja ‚Üí dotenv.config({ override: false })
‚úÖ Sprawdzenie zmiennych ‚Üí echo $LOCAL_USERNAME lub console.log(process.env.LOCAL_USERNAME);
‚úÖ Rƒôczne nadpisanie w terminalu przed uruchomieniem test√≥w
‚úÖ Usuniƒôcie wpis√≥w z .env, je≈õli chcesz wymusiƒá u≈ºycie systemowych zmiennych

Daj znaƒá, je≈õli problem nadal wystƒôpuje! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
jak dziala plik playwright.config.ts?
ChatGPT powiedzia≈Ç:
Jak dzia≈Ça plik playwright.config.ts?
Plik playwright.config.ts s≈Çu≈ºy do konfiguracji Playwrighta. Okre≈õla on globalne ustawienia dla test√≥w, takie jak:

≈örodowiska przeglƒÖdarek
Czas oczekiwania
≈öcie≈ºki do test√≥w
Ustawienia proxy
Zmienne ≈õrodowiskowe
1Ô∏è‚É£ Struktura playwright.config.ts
Typowy plik playwright.config.ts wyglƒÖda tak:

typescript
Kopiuj
Edytuj
import { defineConfig } from '@playwright/test';

export default defineConfig({
  testDir: './tests',  // Folder, w kt√≥rym znajdujƒÖ siƒô testy
  timeout: 30000,      // Maksymalny czas wykonania testu (30s)
  expect: {
    timeout: 5000,     // Maksymalny czas oczekiwania na oczekiwania (5s)
  },
  use: {
    browserName: 'chromium', // Domy≈õlna przeglƒÖdarka (chromium/firefox/webkit)
    headless: true,          // Czy testy majƒÖ dzia≈Çaƒá w trybie headless
    viewport: { width: 1280, height: 720 },
    ignoreHTTPSErrors: true, // Ignorowanie b≈Çƒôd√≥w HTTPS
  },
  projects: [
    {
      name: 'Chrome',
      use: { browserName: 'chromium' },
    },
    {
      name: 'Firefox',
      use: { browserName: 'firefox' },
    },
  ],
});
2Ô∏è‚É£ Kluczowe sekcje playwright.config.ts
Sekcja	Opis
testDir	Okre≈õla folder, w kt√≥rym znajdujƒÖ siƒô testy
timeout	Ustala maksymalny czas trwania testu
expect.timeout	Maksymalny czas na spe≈Çnienie expect()
use	Ustawienia domy≈õlne dla test√≥w (przeglƒÖdarka, widok, proxy)
projects	Pozwala testowaƒá w r√≥≈ºnych przeglƒÖdarkach
3Ô∏è‚É£ Przyk≈Çad z u≈ºyciem zmiennych ≈õrodowiskowych
Je≈õli chcesz u≈ºywaƒá zmiennych ≈õrodowiskowych np. LOCAL_USERNAME i LOCAL_PASSWORD, mo≈ºesz dodaƒá obs≈Çugƒô .env:

üìå Dodanie obs≈Çugi .env
1Ô∏è‚É£ Zainstaluj pakiet dotenv

sh
Kopiuj
Edytuj
npm install dotenv
2Ô∏è‚É£ Dodaj do playwright.config.ts

typescript
Kopiuj
Edytuj
import { defineConfig } from '@playwright/test';
import dotenv from 'dotenv';

// Wczytanie zmiennych z pliku .env, ale NIE nadpisuje ju≈º istniejƒÖcych
dotenv.config({ override: false });

export default defineConfig({
  use: {
    baseURL: 'https://your-api-url.com',
    headless: true,
    extraHTTPHeaders: {
      Authorization: `Basic ${Buffer.from(
        `${process.env.LOCAL_USERNAME}:${process.env.LOCAL_PASSWORD}`
      ).toString('base64')}`,
    },
  },
});
4Ô∏è‚É£ Jak uruchomiƒá testy z konfiguracjƒÖ Playwright?
Opcja 1: Uruchomienie normalne
sh
Kopiuj
Edytuj
npx playwright test
Opcja 2: Uruchomienie w trybie debugowania
sh
Kopiuj
Edytuj
npx playwright test --debug
Opcja 3: Uruchomienie test√≥w w konkretnej przeglƒÖdarce
sh
Kopiuj
Edytuj
npx playwright test --project=Chrome
5Ô∏è‚É£ Jak sprawdziƒá, jakie zmienne ≈õrodowiskowe sƒÖ widoczne dla Playwright?
Dodaj do playwright.config.ts:

typescript
Kopiuj
Edytuj
console.log("LOCAL_USERNAME:", process.env.LOCAL_USERNAME);
console.log("LOCAL_PASSWORD:", process.env.LOCAL_PASSWORD);
Nastƒôpnie uruchom testy i sprawd≈∫ warto≈õci w terminalu.

üöÄ Podsumowanie
üîπ playwright.config.ts definiuje globalne ustawienia test√≥w
üîπ Pozwala okre≈õliƒá przeglƒÖdarki, timeouty, zmienne ≈õrodowiskowe
üîπ Mo≈ºesz u≈ºyƒá dotenv, aby ≈Çadowaƒá zmienne z .env
üîπ Mo≈ºna dodaƒá nag≈Ç√≥wki HTTP (np. Authorization) do ka≈ºdej sesji testowej

Daj znaƒá, je≈õli potrzebujesz wiƒôcej szczeg√≥≈Ç√≥w! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
w jaki spos√≥b w konkretnym te≈õcie wywo≈Çaƒá zmiennƒÖ okre≈õlonƒÖ defineConfig? Np. Proxy : server
ChatGPT powiedzia≈Ç:
Aby w konkretnym te≈õcie uzyskaƒá dostƒôp do zmiennej okre≈õlonej w defineConfig (np. proxy: server), mo≈ºesz u≈ºyƒá parametru { playwright }, kt√≥ry jest dostƒôpny w testach Playwright.

1Ô∏è‚É£ Ustawienie zmiennej w playwright.config.ts
Najpierw zdefiniuj proxy w playwright.config.ts:

typescript
Kopiuj
Edytuj
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    proxy: {
      server: 'http://proxy.example.com:8080',
      bypass: ['localhost'],
    },
  },
});
2Ô∏è‚É£ Uzyskanie warto≈õci proxy w te≈õcie
W te≈õcie mo≈ºesz uzyskaƒá dostƒôp do tej zmiennej przez test.info().config:

typescript
Kopiuj
Edytuj
import { test, expect } from '@playwright/test';

test('Sprawdzenie warto≈õci proxy', async ({ playwright }) => {
  const proxyConfig = test.info().config.use?.proxy;
  console.log('Ustawienia proxy:', proxyConfig);
  
  expect(proxyConfig).toBeDefined();
});
Teraz proxyConfig bƒôdzie zawieraƒá warto≈õci okre≈õlone w playwright.config.ts.

3Ô∏è‚É£ U≈ºycie proxy w klasie Api
Aby wstrzyknƒÖƒá warto≈õƒá proxy do Twojej klasy Api, mo≈ºesz zmodyfikowaƒá test:

üîπ Pobranie proxy w te≈õcie
typescript
Kopiuj
Edytuj
test('API Test - Create and Delete Page', async ({ playwright }) => {
  const proxyConfig = test.info().config.use?.proxy;

  const api = Api.getInstance();
  api.setProxy(proxyConfig); // Nowa metoda do ustawiania proxy dynamicznie

  const pageData = await api.createPage();
  expect(pageData).toHaveProperty('id');

  await api.deletePage(pageData.id);
});
üîπ Dodanie metody setProxy() w klasie Api
typescript
Kopiuj
Edytuj
class Api {
  private static instance: Api | null = null;
  private proxyConfig: any;
  private baseUrl: string;
  private authToken: string;

  private constructor() {
    this.baseUrl = 'https://your-api-url.com';
    this.createInstance();
  }

  public static getInstance(): Api {
    if (!Api.instance) {
      Api.instance = new Api();
    }
    return Api.instance;
  }

  public setProxy(proxyConfig: any) {
    if (proxyConfig) {
      this.proxyConfig = proxyConfig;
    }
  }
}
Teraz proxy zostanie pobrane z konfiguracji playwright.config.ts i dynamicznie ustawione w Twojej klasie Api.

üìå Podsumowanie
1Ô∏è‚É£ Zdefiniuj proxy w playwright.config.ts
2Ô∏è‚É£ Uzyskaj warto≈õƒá proxy w te≈õcie przez test.info().config.use.proxy
3Ô∏è‚É£ Dodaj metodƒô setProxy() w Api, aby dynamicznie ustawiƒá proxy

Dziƒôki temu testy bƒôdƒÖ automatycznie pobieraƒá poprawne warto≈õci proxy, a klasa Api bƒôdzie mog≈Ça ich u≈ºywaƒá bez potrzeby rƒôcznego ustawiania. üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
dla tego dostaje Property 'use' does not exists on type 'FullConfig<{}, {}>'
ChatGPT powiedzia≈Ç:
Aby poprawnie pobraƒá konfiguracjƒô Playwright (np. proxy) w te≈õcie, nale≈ºy u≈ºyƒá test.info().config.metadata zamiast test.info().config.use, poniewa≈º Playwright domy≈õlnie nie eksponuje use w konfiguracji dostƒôpnej w testach. Oto poprawione podej≈õcie:

1Ô∏è‚É£ Poprawiona metoda pobierania proxy w te≈õcie
Zamiast b≈Çƒôdnego test.info().config.use.proxy, nale≈ºy skorzystaƒá z test.info().config.metadata.proxy:

typescript
Kopiuj
Edytuj
import { test, expect } from '@playwright/test';

test('Sprawdzenie warto≈õci proxy', async ({}) => {
  const proxyConfig = test.info().config.metadata?.proxy;
  console.log('Ustawienia proxy:', proxyConfig);

  expect(proxyConfig).toBeDefined();
});
2Ô∏è‚É£ Poprawiona konfiguracja w playwright.config.ts
Aby dane proxy by≈Çy dostƒôpne w metadata, nale≈ºy je tam umie≈õciƒá:

typescript
Kopiuj
Edytuj
import { defineConfig } from '@playwright/test';

export default defineConfig({
  metadata: {
    proxy: {
      server: 'http://proxy.example.com:8080',
      bypass: ['localhost'],
    },
  },
  use: {
    headless: true,
  },
});
Teraz konfiguracja proxy bƒôdzie dostƒôpna w test.info().config.metadata.proxy.

3Ô∏è‚É£ Przekazanie proxy do klasy Api
Zmieniamy test, aby przekazywa≈Ç proxy do Api:

typescript
Kopiuj
Edytuj
test('API Test - Create and Delete Page', async ({}) => {
  const proxyConfig = test.info().config.metadata?.proxy;

  const api = Api.getInstance();
  api.setProxy(proxyConfig); // Nowa metoda do ustawiania proxy dynamicznie

  const pageData = await api.createPage();
  expect(pageData).toHaveProperty('id');

  await api.deletePage(pageData.id);
});
Dodajemy metodƒô setProxy() w klasie Api:

typescript
Kopiuj
Edytuj
public setProxy(proxyConfig: any) {
  if (proxyConfig) {
    this.proxyConfig = proxyConfig;
  }
}
4Ô∏è‚É£ Podsumowanie
‚úÖ Pobieranie proxy ‚Üí test.info().config.metadata.proxy
‚úÖ Dodanie proxy do metadata w playwright.config.ts
‚úÖ Przekazanie proxy do Api za pomocƒÖ setProxy()

Teraz konfiguracja proxy bƒôdzie poprawnie dostƒôpna w te≈õcie. üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
w jaki spos√≥b po dodaniu do zmiennych ≈õrodowiskowych w windows zmiennej password=dupa wczytaƒá tƒÖ warto≈õƒá w te≈õcei playwright?
ChatGPT powiedzia≈Ç:
Aby wczytaƒá zmiennƒÖ ≈õrodowiskowƒÖ PASSWORD (np. password=dupa) w te≈õcie Playwright na Windows, wykonaj nastƒôpujƒÖce kroki:

1Ô∏è‚É£ Ustawienie zmiennej ≈õrodowiskowej w Windows
Je≈õli jeszcze nie ustawi≈Çe≈õ zmiennej, u≈ºyj jednego z poni≈ºszych sposob√≥w:

Metoda 1: Ustawienie zmiennej na sta≈Çe
PowerShell:

powershell
Kopiuj
Edytuj
[System.Environment]::SetEnvironmentVariable("PASSWORD", "dupa", "User")
CMD:

cmd
Kopiuj
Edytuj
setx PASSWORD "dupa"
‚úÖ Ta metoda zapewni, ≈ºe zmienna bƒôdzie dostƒôpna nawet po ponownym uruchomieniu systemu.

Metoda 2: Ustawienie zmiennej na czas sesji
PowerShell:

powershell
Kopiuj
Edytuj
$env:PASSWORD="dupa"
CMD:

cmd
Kopiuj
Edytuj
set PASSWORD=dupa
‚úÖ Ta metoda dzia≈Ça tylko dla bie≈ºƒÖcej sesji terminala.

2Ô∏è‚É£ Sprawdzenie, czy zmienna jest poprawnie ustawiona
W tym samym terminalu wpisz:

PowerShell:
powershell
Kopiuj
Edytuj
echo $env:PASSWORD
CMD:
cmd
Kopiuj
Edytuj
echo %PASSWORD%
Je≈õli widzisz "dupa", oznacza to, ≈ºe zmienna jest ustawiona poprawnie.

3Ô∏è‚É£ Pobranie warto≈õci zmiennej w te≈õcie Playwright
Dodaj logowanie do kodu testu, aby sprawdziƒá, czy Playwright poprawnie odczytuje zmiennƒÖ:

typescript
Kopiuj
Edytuj
test('Sprawdzenie zmiennej ≈õrodowiskowej PASSWORD', async ({}) => {
  console.log("PASSWORD:", process.env.PASSWORD);
  expect(process.env.PASSWORD).toBeDefined();
});
Teraz uruchom test:

sh
Kopiuj
Edytuj
npx playwright test
Je≈õli zmienna PASSWORD jest dostƒôpna, zobaczysz jej warto≈õƒá w konsoli.

4Ô∏è‚É£ U≈ºycie zmiennej w kodzie API
Aby wykorzystaƒá PASSWORD w klasie Api, zmie≈Ñ createInstance():

typescript
Kopiuj
Edytuj
private createInstance() {
  const isJenkins = process.env.CI === 'true'; // Wykrywanie ≈õrodowiska
  const username = isJenkins ? process.env.JENKINS_USERNAME : process.env.LOCAL_USERNAME;
  const password = process.env.PASSWORD || (isJenkins ? process.env.JENKINS_PASSWORD : process.env.LOCAL_PASSWORD);

  if (!password) {
    throw new Error("PASSWORD is not set in environment variables");
  }

  this.authToken = this.generateBasicAuthToken(username, password);

  this.proxyConfig = {
    host: 'proxy.example.com',
    port: 8080,
    protocol: 'http',
  };
}
5Ô∏è‚É£ Alternatywna metoda: U≈ºycie .env
Je≈õli chcesz u≈ºywaƒá .env zamiast zmiennych ≈õrodowiskowych systemowych, wykonaj nastƒôpujƒÖce kroki:

Zainstaluj dotenv:

sh
Kopiuj
Edytuj
npm install dotenv
Utw√≥rz plik .env w g≈Ç√≥wnym katalogu projektu:

ini
Kopiuj
Edytuj
PASSWORD=dupa
Za≈Çaduj .env w playwright.config.ts:

typescript
Kopiuj
Edytuj
import dotenv from 'dotenv';
dotenv.config();
Teraz process.env.PASSWORD bƒôdzie automatycznie odczytywane z .env, je≈õli nie ma go w systemowych zmiennych ≈õrodowiskowych.

üöÄ Podsumowanie
‚úî Ustaw zmiennƒÖ ≈õrodowiskowƒÖ w Windows (setx PASSWORD "dupa")
‚úî Sprawd≈∫ jej warto≈õƒá (echo %PASSWORD%)
‚úî U≈ºyj process.env.PASSWORD w te≈õcie Playwright
‚úî Opcjonalnie: Dodaj .env i dotenv.config()

Dziƒôki temu PASSWORD bƒôdzie poprawnie odczytywane w Playwright! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
jak uruchomic test o okreslonym tagu
ChatGPT powiedzia≈Ç:
Aby uruchomiƒá test o okre≈õlonym tagu w Playwright, nale≈ºy oznaczyƒá testy przy u≈ºyciu test.describe lub test z metadanymi (.tag), a nastƒôpnie u≈ºyƒá opcji --grep podczas uruchamiania test√≥w.

1Ô∏è‚É£ Oznaczenie testu tagiem
Dodaj znacznik (@tagName) w opisie testu:

typescript
Kopiuj
Edytuj
test('@api API Test - Create and Delete Page', async ({}) => {
  const api = Api.getInstance();

  const pageData = await api.createPage();
  expect(pageData).toHaveProperty('id');

  await api.deletePage(pageData.id);
});
2Ô∏è‚É£ Uruchomienie testu z okre≈õlonym tagiem
W terminalu uruchom Playwright z filtrem:

sh
Kopiuj
Edytuj
npx playwright test --grep @api
‚úÖ Tylko testy oznaczone @api zostanƒÖ uruchomione.

3Ô∏è‚É£ Uruchomienie testu z wykluczeniem tagu
Je≈õli chcesz pominƒÖƒá testy z okre≈õlonym tagiem:

sh
Kopiuj
Edytuj
npx playwright test --grep-invert @api
‚úÖ Uruchomi wszystkie testy opr√≥cz tych oznaczonych @api.

4Ô∏è‚É£ U≈ºycie test.describe do grupowania test√≥w
Je≈õli masz wiele test√≥w zwiƒÖzanych z API, mo≈ºesz grupowaƒá je w test.describe:

typescript
Kopiuj
Edytuj
test.describe('@api API Tests', () => {
  test('Create and Delete Page', async ({}) => {
    const api = Api.getInstance();

    const pageData = await api.createPage();
    expect(pageData).toHaveProperty('id');

    await api.deletePage(pageData.id);
  });
});
Teraz uruchomienie:

sh
Kopiuj
Edytuj
npx playwright test --grep @api
uruchomi wszystkie testy w tej grupie.

üìå Podsumowanie
‚úÖ Dodaj tag (@api) w nazwie testu lub test.describe.
‚úÖ Uruchom testy z tagiem ‚Üí npx playwright test --grep @api.
‚úÖ Wyklucz testy z tagiem ‚Üí npx playwright test --grep-invert @api.

Teraz mo≈ºesz ≈Çatwo filtrowaƒá testy wed≈Çug tag√≥w w Playwright! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
napisz metodƒô w statycznej klasie, kt√≥ra bƒôdzie generowa≈ÇƒÖ
ChatGPT powiedzia≈Ç:
Dodajƒô do kodu statycznƒÖ klasƒô TokenGenerator, kt√≥ra bƒôdzie generowa≈Ça tokeny. Tokeny bƒôdƒÖ obs≈Çugiwane w spos√≥b dynamiczny na podstawie nazwy u≈ºytkownika i has≈Ça.

Playwright Api Test
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
import { test, expect } from '@playwright/test';
import axios, { AxiosRequestConfig } from 'axios';
import FormData from 'form-data';

class TokenGenerator {
  public static generateBasicAuthToken(username: string, password: string): string {
    return `Basic ${Buffer.from(`${username}:${password}`).toString('base64')}`;
  }
}

class Api {
  private static instance: Api | null = null;
  private proxyConfig: any;
  private baseUrl: string;
  private authToken: string;

  private constructor() {
    this.baseUrl = 'https://your-api-url.com';
    this.createInstance();
  }

  public static getInstance(): Api {
    if (!Api.instance) {
      Api.instance = new Api();
    }
    return Api.instance;
  }

  private createInstance() {
    const isJenkins = process.env.CI === 'true'; // Wykrywanie ≈õrodowiska
    const username = isJenkins ? process.env.JENKINS_USERNAME : process.env.LOCAL_USERNAME;
    const password = isJenkins ? process.env.JENKINS_PASSWORD : process.env.LOCAL_PASSWORD;
    this.authToken = TokenGenerator.generateBasicAuthToken(username, password);
    
    this.proxyConfig = {
      host: 'proxy.example.com',
      port: 8080,
      protocol: 'http',
    };
  }

  async createPage() {
    const formData = new FormData();
    formData.append('templatePath', 'apps/dpws/');
    formData.append('parentPath', '/content/templates');

    const config: AxiosRequestConfig = {
      method: 'POST',
      url: `${this.baseUrl}/createPage`,
      data: formData,
      headers: {
        ...formData.getHeaders(),
        'Content-Type': 'text/html',
        'Authorization': this.authToken,
      },
      proxy: this.proxyConfig,
    };

    const response = await axios(config);
    expect(response.status).toBe(200);
    return response.data;
  }

  async deletePage(pageId: string) {
    const config: AxiosRequestConfig = {
      method: 'DELETE',
      url: `${this.baseUrl}/deletePage/${pageId}`,
      headers: {
        'Authorization': this.authToken,
      },
      proxy: this.proxyConfig,
    };

    const response = await axios(config);
    expect(response.status).toBe(200);
  }
}

test('API Test - Create and Delete Page', async ({}) => {
  const api = Api.getInstance();

  const pageData = await api.createPage();
  expect(pageData).toHaveProperty('id');

  await api.deletePage(pageData.id);
});

Edytowano
Doda≈Çem statycznƒÖ klasƒô TokenGenerator, kt√≥ra generuje tokeny Basic Auth na podstawie nazwy u≈ºytkownika i has≈Ça. Teraz metoda generateBasicAuthToken() jest wywo≈Çywana w Api zamiast przechowywania tej logiki wewnƒÖtrz klasy Api. üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
w jaki spos√≥b skonfigurowaƒá pipeline w gitlab by publikowa≈Ç jako statycznƒÖ stronƒô raport z test√≥w utworzony przez maven-cuccumber-reporting w folderze target
ChatGPT powiedzia≈Ç:
Aby skonfigurowaƒá pipeline w GitLab CI/CD, kt√≥ry publikuje raport z test√≥w utworzony przez maven-cucumber-reporting jako statycznƒÖ stronƒô GitLab Pages, wykonaj nastƒôpujƒÖce kroki:

üìå 1. Upewnij siƒô, ≈ºe raport generuje siƒô poprawnie
W pliku pom.xml upewnij siƒô, ≈ºe masz wtyczkƒô maven-cucumber-reporting:

xml
Kopiuj
Edytuj
<plugin>
    <groupId>net.masterthought</groupId>
    <artifactId>maven-cucumber-reporting</artifactId>
    <version>5.0.0</version>
    <executions>
        <execution>
            <id>report</id>
            <phase>verify</phase>
            <goals>
                <goal>generate</goal>
            </goals>
            <configuration>
                <projectName>My Project</projectName>
                <outputDirectory>${project.build.directory}/cucumber-reports</outputDirectory>
                <jsonFiles>
                    <param>${project.build.directory}/cucumber.json</param>
                </jsonFiles>
            </configuration>
        </execution>
    </executions>
</plugin>
Po uruchomieniu:

sh
Kopiuj
Edytuj
mvn clean verify
Raport powinien znajdowaƒá siƒô w:

bash
Kopiuj
Edytuj
target/cucumber-reports/
üìå 2. Dodaj gitlab-ci.yml do repozytorium
Utw√≥rz plik .gitlab-ci.yml w katalogu g≈Ç√≥wnym repozytorium i dodaj poni≈ºszƒÖ konfiguracjƒô:

yaml
Kopiuj
Edytuj
stages:
  - test
  - deploy

variables:
  MAVEN_CLI_OPTS: "-B -ntp"
  TARGET_DIR: "target/cucumber-reports"
  PAGES_DIR: "public"

before_script:
  - export PATH="$MAVEN_HOME/bin:$PATH"

test:
  stage: test
  image: maven:3.8.4-openjdk-11
  script:
    - mvn clean verify $MAVEN_CLI_OPTS
  artifacts:
    paths:
      - $TARGET_DIR
    expire_in: 1 day

deploy_pages:
  stage: deploy
  image: alpine
  dependencies:
    - test
  script:
    - mkdir -p $PAGES_DIR
    - cp -r $TARGET_DIR/* $PAGES_DIR/
  artifacts:
    paths:
      - public
  only:
    - main  # Wykonuj tylko na branchu main
üìå 3. Jak to dzia≈Ça?
Testy (test stage):

UruchamiajƒÖ mvn clean verify, generujƒÖc raport w target/cucumber-reports.
Raport jest zapisywany jako artifact.
Publikacja (deploy_pages stage):

Tworzy katalog public/.
Kopiuje raport do public/, aby by≈Ç dostƒôpny przez GitLab Pages.
Publikuje raport jako stronƒô statycznƒÖ.
üìå 4. Sprawdzenie raportu
Po wdro≈ºeniu raportu, znajdziesz go na stronie:

php-template
Kopiuj
Edytuj
https://<twoja-nazwa-grupy>.gitlab.io/<twoje-repozytorium>/
Tam znajdziesz statycznƒÖ stronƒô z raportem z test√≥w.

üìå 5. Opcjonalne ulepszenia
‚úÖ Uruchamianie na merge request: Dodaj do only:

yaml
Kopiuj
Edytuj
  only:
    - main
    - merge_requests
‚úÖ Przechowywanie raport√≥w d≈Çu≈ºej:

yaml
Kopiuj
Edytuj
  expire_in: 7 days
‚úÖ Notyfikacje o b≈Çƒôdach: Dodaj Slack/Webhook powiadomienia w GitLab CI/CD > Settings > Integrations.

üöÄ Gotowe!
Teraz pipeline automatycznie uruchomi testy, wygeneruje raport i opublikuje go jako statycznƒÖ stronƒô GitLab Pages. üéâ






Powiedzia≈Çe≈õ(-a≈õ):
co robi polecenie - rm -rf w gitlab ?

1/2

ChatGPT powiedzia≈Ç:
Co robi polecenie rm -rf w GitLab CI/CD?
W GitLab CI/CD (oraz w systemach Unix/Linux) polecenie:

sh
Kopiuj
Edytuj
rm -rf <≈õcie≈ºka>
wykonuje nastƒôpujƒÖce akcje:

rm ‚Üí Usuwa plik lub katalog.
-r (rekurencyjnie) ‚Üí Usuwa katalog i jego ca≈ÇƒÖ zawarto≈õƒá (w tym podfoldery i pliki).
-f (force) ‚Üí Wymusza usuniƒôcie bez pytania o potwierdzenie.
üìå Przyk≈Çady w GitLab CI/CD
1Ô∏è‚É£ Usuniƒôcie katalogu target przed uruchomieniem test√≥w
yaml
Kopiuj
Edytuj
test:
  stage: test
  script:
    - rm -rf target  # Usuwa katalog target, je≈õli istnieje
    - mvn clean verify
‚úÖ Zapewnia, ≈ºe testy startujƒÖ od czystego ≈õrodowiska.

2Ô∏è‚É£ Usuniƒôcie katalogu public przed publikacjƒÖ GitLab Pages
yaml
Kopiuj
Edytuj
deploy:
  stage: deploy
  script:
    - rm -rf public  # Usuwa poprzednie pliki
    - mkdir -p public
    - cp -r target/cucumber-reports/* public/
  artifacts:
    paths:
      - public
‚úÖ Zapewnia, ≈ºe nowa wersja raportu nie bƒôdzie zawieraƒá starych plik√≥w.

üö® Uwaga! Niebezpiecze≈Ñstwo rm -rf /*
Je≈õli przypadkowo u≈ºyjesz:

sh
Kopiuj
Edytuj
rm -rf /
lub

sh
Kopiuj
Edytuj
rm -rf ./*
w z≈Çym miejscu, mo≈ºesz usunƒÖƒá wszystkie pliki w kontenerze CI/CD!
üëâ Dlatego zawsze upewnij siƒô, ≈ºe wskazujesz konkretny folder, np. rm -rf target.

üìå Podsumowanie
üîπ rm -rf <folder> usuwa katalog i jego zawarto≈õƒá bez pytania.
üîπ W GitLab CI/CD u≈ºywane jest do czyszczenia katalog√≥w przed testami lub publikacjƒÖ.
üîπ Zawsze wskazuj konkretnƒÖ ≈õcie≈ºkƒô, aby uniknƒÖƒá przypadkowego usuniƒôcia wszystkiego! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
jak w gitl lab pipelines zmieniƒá nazwƒô pliku
ChatGPT powiedzia≈Ç:
Jak zmieniƒá nazwƒô pliku w GitLab CI/CD Pipeline?
W GitLab CI/CD mo≈ºesz u≈ºyƒá polecenia mv (move), aby zmieniƒá nazwƒô pliku w ramach script w .gitlab-ci.yml.

üìå 1Ô∏è‚É£ Zmiana nazwy pliku w GitLab Pipeline
W pliku .gitlab-ci.yml dodaj nastƒôpujƒÖce polecenie w odpowiednim etapie (stage):

yaml
Kopiuj
Edytuj
rename_file:
  stage: deploy
  script:
    - mv old_filename.txt new_filename.txt
‚úÖ To polecenie zmieni nazwƒô old_filename.txt na new_filename.txt w bie≈ºƒÖcym katalogu.

üìå 2Ô∏è‚É£ Zmiana nazwy pliku w innym katalogu
Je≈õli plik znajduje siƒô w innym katalogu, wska≈º pe≈ÇnƒÖ ≈õcie≈ºkƒô:

yaml
Kopiuj
Edytuj
rename_file:
  stage: deploy
  script:
    - mv path/to/old_filename.txt path/to/new_filename.txt
‚úÖ Przenosi i zmienia nazwƒô pliku w katalogu path/to/.

üìå 3Ô∏è‚É£ Przyk≈Çad: Zmiana nazwy raportu przed publikacjƒÖ
Je≈õli generujesz raport w target/cucumber-reports i chcesz zmieniƒá jego nazwƒô przed publikacjƒÖ:

yaml
Kopiuj
Edytuj
deploy:
  stage: deploy
  script:
    - mv target/cucumber-reports/index.html target/cucumber-reports/report.html
  artifacts:
    paths:
      - target/cucumber-reports/report.html
‚úÖ Zmieniasz nazwƒô index.html na report.html i publikujesz go jako artifact.

üìå 4Ô∏è‚É£ Obs≈Çuga b≈Çƒôd√≥w ‚Äì Sprawdzenie, czy plik istnieje przed zmianƒÖ nazwy
Je≈õli nie masz pewno≈õci, czy plik istnieje, mo≈ºesz dodaƒá warunek if [ -f filename ]:

yaml
Kopiuj
Edytuj
rename_file:
  stage: deploy
  script:
    - if [ -f old_filename.txt ]; then mv old_filename.txt new_filename.txt; fi
‚úÖ Zapobiega b≈Çƒôdom, je≈õli plik nie istnieje.

üìå 5Ô∏è‚É£ Zmiana nazwy wielu plik√≥w jednocze≈õnie
Je≈õli chcesz zmieniƒá nazwƒô wielu plik√≥w:

yaml
Kopiuj
Edytuj
rename_files:
  stage: deploy
  script:
    - mv file1.txt new_file1.txt
    - mv file2.txt new_file2.txt
Lub przy u≈ºyciu pƒôtli:

yaml
Kopiuj
Edytuj
rename_files:
  stage: deploy
  script:
    - for file in *.log; do mv "$file" "renamed_$file"; done
‚úÖ Dodaje prefiks renamed_ do wszystkich plik√≥w .log.

üìå 6Ô∏è‚É£ Automatyczna zmiana nazwy na podstawie daty
Je≈õli chcesz dodaƒá do nazwy datƒô/godzinƒô:

yaml
Kopiuj
Edytuj
rename_file:
  stage: deploy
  script:
    - mv report.txt "report_$(date +%Y-%m-%d_%H-%M-%S).txt"
‚úÖ Zmieni report.txt na report_2024-02-09_14-30-00.txt.

üöÄ Podsumowanie
‚úÖ mv old_filename new_filename ‚Üí Podstawowa zmiana nazwy.
‚úÖ Podaj pe≈ÇnƒÖ ≈õcie≈ºkƒô (mv path/to/file path/to/new_file), je≈õli plik jest w innym katalogu.
‚úÖ U≈ºyj if [ -f file ]; then mv ...; fi, aby uniknƒÖƒá b≈Çƒôd√≥w.
‚úÖ Mo≈ºesz zmieniaƒá nazwy wielu plik√≥w jednocze≈õnie za pomocƒÖ pƒôtli.
‚úÖ Dodaj datƒô/godzinƒô (mv file \"file_$(date +%Y-%m-%d).txt\"), je≈õli chcesz wersjonowaƒá pliki.

Teraz GitLab CI/CD automatycznie zmieni nazwy plik√≥w w Twoim pipeline! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
jak wy≈õwietliƒá zawarto≈õƒá katalogu w gitlab?
ChatGPT powiedzia≈Ç:
Jak wy≈õwietliƒá zawarto≈õƒá katalogu w GitLab CI/CD Pipeline?
Aby sprawdziƒá, jakie pliki znajdujƒÖ siƒô w katalogu w GitLab CI/CD, u≈ºyj polecenia ls -l w skrypcie script w .gitlab-ci.yml.

üìå 1Ô∏è‚É£ Podstawowe wy≈õwietlenie zawarto≈õci katalogu
Dodaj etap w .gitlab-ci.yml:

yaml
Kopiuj
Edytuj
list_files:
  stage: debug
  script:
    - ls -l
‚úÖ To wy≈õwietli listƒô plik√≥w w bie≈ºƒÖcym katalogu (repozytorium).

üìå 2Ô∏è‚É£ Wy≈õwietlenie zawarto≈õci konkretnego katalogu
Aby zobaczyƒá pliki w podkatalogu, np. target:

yaml
Kopiuj
Edytuj
list_files:
  stage: debug
  script:
    - ls -l target
‚úÖ Pokazuje pliki w target/.

Je≈õli chcesz wy≈õwietliƒá zawarto≈õƒá rekurencyjnie:

yaml
Kopiuj
Edytuj
list_files:
  stage: debug
  script:
    - ls -lR target
‚úÖ Pokazuje pliki w target/ oraz jego podkatalogach.

üìå 3Ô∏è‚É£ Wy≈õwietlenie ukrytych plik√≥w
Aby zobaczyƒá pliki ukryte (.gitignore, .env, itp.):

yaml
Kopiuj
Edytuj
list_files:
  stage: debug
  script:
    - ls -la
‚úÖ ls -la poka≈ºe r√≥wnie≈º pliki ukryte.

üìå 4Ô∏è‚É£ Wy≈õwietlenie zawarto≈õci katalogu po buildzie/testach
Je≈õli chcesz sprawdziƒá, jakie pliki zosta≈Çy utworzone po testach:

yaml
Kopiuj
Edytuj
test:
  stage: test
  script:
    - mvn clean verify
    - ls -l target/
‚úÖ Pozwala sprawdziƒá, czy testy utworzy≈Çy odpowiednie pliki (cucumber-reports, jar itp.).

üìå 5Ô∏è‚É£ Logowanie zawarto≈õci katalogu w artefaktach
Je≈õli chcesz zobaczyƒá zawarto≈õƒá katalogu po zako≈Ñczeniu pipeline, dodaj go jako artefakt:

yaml
Kopiuj
Edytuj
test:
  stage: test
  script:
    - mvn clean verify
    - ls -l target/ > target/file_list.txt
  artifacts:
    paths:
      - target/file_list.txt
‚úÖ Plik file_list.txt bƒôdzie dostƒôpny do pobrania w zak≈Çadce "Job artifacts" w GitLab.

üìå 6Ô∏è‚É£ Sprawdzenie zawarto≈õci katalogu w interaktywnej sesji (debug mode)
Je≈õli potrzebujesz zobaczyƒá pliki rƒôcznie w interaktywnej sesji, uruchom debug mode:

Przejd≈∫ do CI/CD ‚Üí Pipelines w GitLab.
Kliknij w ostatni job.
Wybierz "Debugging with interactive web terminal".
Wpisz w terminalu:
sh
Kopiuj
Edytuj
ls -l target
üöÄ Podsumowanie
üîπ ls -l ‚Üí Wy≈õwietla zawarto≈õƒá katalogu.
üîπ ls -la ‚Üí Pokazuje ukryte pliki.
üîπ ls -l target/ ‚Üí Sprawdza katalog target/.
üîπ ls -lR ‚Üí Rekurencyjnie wy≈õwietla wszystkie podfoldery.
üîπ Zapisz wynik ls w pliku i dodaj jako artefakt, je≈õli chcesz go przeanalizowaƒá p√≥≈∫niej.

Teraz mo≈ºesz ≈Çatwo sprawdziƒá zawarto≈õƒá katalogu w GitLab CI/CD! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
w jaki sposob wydrukowaƒá cos w konsoli przed wykonaniem skryptu
ChatGPT powiedzia≈Ç:
Jak wydrukowaƒá co≈õ w konsoli przed wykonaniem skryptu w GitLab CI/CD?
Aby wy≈õwietliƒá wiadomo≈õƒá w konsoli przed wykonaniem skryptu w GitLab CI/CD, mo≈ºna u≈ºyƒá polecenia echo.

üìå 1Ô∏è‚É£ Podstawowe echo przed wykonaniem skryptu
W .gitlab-ci.yml dodaj:

yaml
Kopiuj
Edytuj
job_example:
  stage: test
  script:
    - echo "üîπ Rozpoczynam testy..."
    - mvn clean verify
    - echo "‚úÖ Testy zako≈Ñczone!"
‚úÖ Przed uruchomieniem test√≥w zobaczysz w logach:

Kopiuj
Edytuj
üîπ Rozpoczynam testy...
‚úÖ Testy zako≈Ñczone!
üìå 2Ô∏è‚É£ U≈ºycie before_script do drukowania przed script
Je≈õli chcesz co≈õ wydrukowaƒá przed wszystkimi poleceniami w script, u≈ºyj before_script:

yaml
Kopiuj
Edytuj
job_example:
  stage: test
  before_script:
    - echo "‚ö° Uruchamiam pipeline na branchu: $CI_COMMIT_REF_NAME"
  script:
    - mvn clean verify
‚úÖ Przed uruchomieniem script, zobaczysz w logach:

less
Kopiuj
Edytuj
‚ö° Uruchamiam pipeline na branchu: main
üìå 3Ô∏è‚É£ Drukowanie informacji o ≈õrodowisku przed testami
yaml
Kopiuj
Edytuj
job_debug:
  stage: test
  before_script:
    - echo "üîç Debug: CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME"
    - echo "üîç Debug: RUNNER_NAME=$CI_RUNNER_DESCRIPTION"
  script:
    - ls -l
‚úÖ Poka≈ºe w konsoli:

rust
Kopiuj
Edytuj
üîç Debug: CI_COMMIT_REF_NAME=feature-branch
üîç Debug: RUNNER_NAME=GitLab Shared Runner
üìå 4Ô∏è‚É£ U≈ºycie echo z kolorem (ANSI)
Je≈õli chcesz podkre≈õliƒá wiadomo≈õci kolorami, u≈ºyj kod√≥w ANSI:

yaml
Kopiuj
Edytuj
job_colored:
  stage: test
  script:
    - echo -e "\033[1;32m‚úÖ Wszystko dzia≈Ça poprawnie!\033[0m"
‚úÖ Poka≈ºe w logach zielony tekst:
‚úÖ Wszystko dzia≈Ça poprawnie!

Kolory ANSI:

\033[1;31m ‚Üí Czerwony
\033[1;32m ‚Üí Zielony
\033[1;33m ‚Üí ≈ª√≥≈Çty
\033[1;34m ‚Üí Niebieski
\033[0m ‚Üí Reset
üöÄ Podsumowanie
‚úî echo "Twoja wiadomo≈õƒá" ‚Äì Wy≈õwietla tekst w konsoli
‚úî before_script ‚Äì Wydrukuj co≈õ przed script
‚úî U≈ºyj zmiennych GitLab CI/CD ($CI_COMMIT_REF_NAME) w echo
‚úî Dodaj kolory ANSI, aby wyr√≥≈ºniƒá tekst w logach

Teraz Twoje pipeline'y bƒôdƒÖ czytelniejsze i bardziej informacyjne! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
w jaki spos√≥b por√≥wnywaƒá json w java z mo≈ºliwo≈õciƒÖ ograniczenia ilo≈õci miejsc po przecinku, kt√≥re bƒôdƒÖ validowane?
ChatGPT powiedzia≈Ç:
Por√≥wnywanie JSON w Java z ograniczeniem ilo≈õci miejsc po przecinku
Je≈õli chcesz por√≥wnaƒá dwa obiekty JSON, ale ograniczyƒá liczbƒô miejsc po przecinku, mo≈ºesz u≈ºyƒá Jackson, Gson lub JSONAssert i zastosowaƒá zaokrƒÖglanie warto≈õci numerycznych.

üìå 1Ô∏è‚É£ Por√≥wnywanie JSON z ograniczeniem miejsc po przecinku (Jackson + BigDecimal)
U≈ºyj Jackson do przekszta≈Çcenia JSON na Map<String, Object>, a nastƒôpnie zastosuj BigDecimal do zaokrƒÖglenia warto≈õci liczbowych.

üìå Przyk≈Çadowy kod:
java
Kopiuj
Edytuj
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.type.TypeReference;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Map;

public class JsonComparator {

    private static final ObjectMapper objectMapper = new ObjectMapper();

    public static boolean compareJsonWithPrecision(String json1, String json2, int decimalPlaces) throws Exception {
        Map<String, Object> map1 = objectMapper.readValue(json1, new TypeReference<Map<String, Object>>() {});
        Map<String, Object> map2 = objectMapper.readValue(json2, new TypeReference<Map<String, Object>>() {});

        roundNumericValues(map1, decimalPlaces);
        roundNumericValues(map2, decimalPlaces);

        return map1.equals(map2);
    }

    private static void roundNumericValues(Map<String, Object> map, int decimalPlaces) {
        map.replaceAll((key, value) -> {
            if (value instanceof Number) {
                return new BigDecimal(value.toString()).setScale(decimalPlaces, RoundingMode.HALF_UP);
            } else if (value instanceof Map) {
                roundNumericValues((Map<String, Object>) value, decimalPlaces);
            }
            return value;
        });
    }

    public static void main(String[] args) throws Exception {
        String json1 = "{\"value\": 1.123456, \"name\": \"Test\"}";
        String json2 = "{\"value\": 1.1234, \"name\": \"Test\"}";

        boolean areEqual = compareJsonWithPrecision(json1, json2, 4);  // Ograniczamy do 4 miejsc
        System.out.println("JSONs sƒÖ takie same? " + areEqual);
    }
}
üîπ Jak to dzia≈Ça?
‚úî Przekszta≈Çca JSON do Map<String, Object>
‚úî ZaokrƒÖgla warto≈õci numeryczne do okre≈õlonej liczby miejsc po przecinku
‚úî Por√≥wnuje przekszta≈Çcone mapy JSON

‚úÖ Je≈õli liczba w JSON1 to 1.123456, a w JSON2 to 1.1234, to przy por√≥wnaniu z decimalPlaces=4 bƒôdƒÖ r√≥wne.

üìå 2Ô∏è‚É£ Por√≥wnywanie JSON przy u≈ºyciu JSONAssert (Biblioteka org.skyscreamer)
Je≈õli chcesz elastycznie por√≥wnywaƒá JSON, mo≈ºesz u≈ºyƒá JSONAssert, kt√≥ry pozwala ignorowaƒá niekt√≥re pola.

üìå Przyk≈Çadowy kod:
java
Kopiuj
Edytuj
import org.json.JSONObject;
import org.skyscreamer.jsonassert.JSONAssert;
import org.skyscreamer.jsonassert.JSONCompareMode;

public class JsonAssertExample {
    public static void main(String[] args) throws Exception {
        String json1 = "{\"value\": 1.123456, \"name\": \"Test\"}";
        String json2 = "{\"value\": 1.1234, \"name\": \"Test\"}";

        JSONObject jsonObject1 = new JSONObject(json1);
        JSONObject jsonObject2 = new JSONObject(json2);

        jsonObject1.put("value", round(jsonObject1.getDouble("value"), 4));
        jsonObject2.put("value", round(jsonObject2.getDouble("value"), 4));

        JSONAssert.assertEquals(jsonObject1.toString(), jsonObject2.toString(), JSONCompareMode.STRICT);
        System.out.println("JSONs sƒÖ r√≥wne!");
    }

    public static double round(double value, int decimalPlaces) {
        BigDecimal bd = new BigDecimal(value);
        return bd.setScale(decimalPlaces, RoundingMode.HALF_UP).doubleValue();
    }
}
üîπ Jak to dzia≈Ça?
‚úî U≈ºywa JSONAssert do por√≥wnania JSON
‚úî ZaokrƒÖgla warto≈õƒá liczbowƒÖ przed por√≥wnaniem
‚úî Obs≈Çuguje STRICT por√≥wnanie (dok≈Çadne, ale mo≈ºna zmieniƒá na LENIENT dla wiƒôkszej tolerancji)

üìå 3Ô∏è‚É£ Por√≥wnywanie JSON za pomocƒÖ Gson i JsonElement
Mo≈ºesz tak≈ºe u≈ºyƒá Gson i JsonElement, aby parsowaƒá i modyfikowaƒá warto≈õci.

üìå Przyk≈Çad kodu:
java
Kopiuj
Edytuj
import com.google.gson.*;
import java.math.BigDecimal;
import java.math.RoundingMode;

public class GsonJsonComparator {

    private static final Gson gson = new GsonBuilder().setPrettyPrinting().create();

    public static boolean compareJsonWithPrecision(String json1, String json2, int decimalPlaces) {
        JsonObject obj1 = gson.fromJson(json1, JsonObject.class);
        JsonObject obj2 = gson.fromJson(json2, JsonObject.class);

        roundJsonValues(obj1, decimalPlaces);
        roundJsonValues(obj2, decimalPlaces);

        return obj1.equals(obj2);
    }

    private static void roundJsonValues(JsonObject jsonObject, int decimalPlaces) {
        for (String key : jsonObject.keySet()) {
            JsonElement element = jsonObject.get(key);
            if (element.isJsonPrimitive() && element.getAsJsonPrimitive().isNumber()) {
                BigDecimal roundedValue = new BigDecimal(element.getAsDouble()).setScale(decimalPlaces, RoundingMode.HALF_UP);
                jsonObject.addProperty(key, roundedValue);
            }
        }
    }

    public static void main(String[] args) {
        String json1 = "{\"value\": 1.123456, \"name\": \"Test\"}";
        String json2 = "{\"value\": 1.1234, \"name\": \"Test\"}";

        boolean areEqual = compareJsonWithPrecision(json1, json2, 4);
        System.out.println("JSONs sƒÖ r√≥wne? " + areEqual);
    }
}
üîπ Jak to dzia≈Ça?
‚úî U≈ºywa Gson do parsowania JSON
‚úî ZaokrƒÖgla warto≈õci numeryczne w JsonObject
‚úî Por√≥wnuje zmodyfikowane obiekty JSON

üìå Kt√≥re rozwiƒÖzanie wybraƒá?
Metoda	Biblioteka	Obs≈Çuga JSON	Obs≈Çuga miejsc po przecinku
Jackson + Map	Jackson	Dobrze radzi sobie z du≈ºymi JSON	‚úÖ W pe≈Çni konfigurowalne
JSONAssert	JSONAssert + org.json	Dobrze radzi sobie z asercjami w testach	‚ö† Musisz rƒôcznie modyfikowaƒá JSON
Gson + JsonElement	Gson	Dobre do lekkich por√≥wna≈Ñ	‚úÖ Wbudowana obs≈Çuga JSON
‚úÖ Najlepsza opcja dla test√≥w ‚Üí JSONAssert
‚úÖ Najlepsza opcja dla og√≥lnego u≈ºycia ‚Üí Jackson + Map
‚úÖ Najprostsza do u≈ºycia ‚Üí Gson

üöÄ Podsumowanie
üîπ Por√≥wnywanie JSON w Java z ograniczeniem miejsc po przecinku mo≈ºna zrobiƒá na kilka sposob√≥w:
‚úÖ Jackson + Map<String, Object> i BigDecimal ‚Äì najlepsza kontrola nad warto≈õciami
‚úÖ JSONAssert ‚Äì do test√≥w jednostkowych
‚úÖ Gson + JsonElement ‚Äì szybkie i lekkie por√≥wnanie JSON

Teraz mo≈ºesz dok≈Çadnie por√≥wnywaƒá JSON, uwzglƒôdniajƒÖc precyzjƒô liczb zmiennoprzecinkowych! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
w jaki spos√≥b przekazac w mvn clean install zmienna MAVEN_OPTS ze zmiennych srodowiskowych zawierajacƒÖ -Dhttps.protocols=TLSv1
ChatGPT powiedzia≈Ç:
Jak przekazaƒá MAVEN_OPTS do mvn clean install ze zmiennych ≈õrodowiskowych?
MAVEN_OPTS to zmienna ≈õrodowiskowa u≈ºywana do przekazywania opcji JVM podczas wykonywania polece≈Ñ Maven.

üìå 1Ô∏è‚É£ Ustawienie MAVEN_OPTS w zmiennych ≈õrodowiskowych
Aby przekazaƒá -Dhttps.protocols=TLSv1, nale≈ºy ustawiƒá MAVEN_OPTS w systemie.

üîπ Tymczasowe ustawienie MAVEN_OPTS (dla bie≈ºƒÖcej sesji)
üîπ Linux/macOS (bash/zsh)
sh
Kopiuj
Edytuj
export MAVEN_OPTS="-Dhttps.protocols=TLSv1"
mvn clean install
üîπ Windows (PowerShell)
powershell
Kopiuj
Edytuj
$env:MAVEN_OPTS="-Dhttps.protocols=TLSv1"
mvn clean install
üîπ Windows (CMD)
cmd
Kopiuj
Edytuj
set MAVEN_OPTS=-Dhttps.protocols=TLSv1
mvn clean install
‚úÖ To ustawienie dzia≈Ça tylko dla aktualnej sesji terminala.

üìå 2Ô∏è‚É£ Sta≈Çe ustawienie MAVEN_OPTS w systemie
üîπ Linux/macOS
Dodaj do ~/.bashrc, ~/.zshrc lub ~/.bash_profile:

sh
Kopiuj
Edytuj
export MAVEN_OPTS="-Dhttps.protocols=TLSv1"
Nastƒôpnie za≈Çaduj konfiguracjƒô:

sh
Kopiuj
Edytuj
source ~/.bashrc
üîπ Windows
Ustaw na sta≈Çe w zmiennych systemowych:

Otw√≥rz Panel sterowania ‚Üí System ‚Üí Zaawansowane ustawienia systemu.
Kliknij Zmienna ≈õrodowiskowa.
W sekcji Zmienne u≈ºytkownika kliknij Nowa.
Nazwa: MAVEN_OPTS
Warto≈õƒá: -Dhttps.protocols=TLSv1
Zapisz i zrestartuj terminal.
‚úÖ Dziƒôki temu MAVEN_OPTS bƒôdzie ustawione na sta≈Çe.

üìå 3Ô∏è‚É£ Przekazanie MAVEN_OPTS jednorazowo w poleceniu
Je≈õli nie chcesz ustawiaƒá zmiennych ≈õrodowiskowych, mo≈ºesz przekazaƒá je bezpo≈õrednio w wywo≈Çaniu Maven:

sh
Kopiuj
Edytuj
MAVEN_OPTS="-Dhttps.protocols=TLSv1" mvn clean install
‚úÖ Dzia≈Ça tylko dla tego konkretnego wywo≈Çania.

üìå 4Ô∏è‚É£ Sprawdzenie, czy MAVEN_OPTS jest poprawnie ustawione
Aby sprawdziƒá, czy MAVEN_OPTS jest ustawione:

üîπ Linux/macOS
sh
Kopiuj
Edytuj
echo $MAVEN_OPTS
üîπ Windows (PowerShell)
powershell
Kopiuj
Edytuj
echo $env:MAVEN_OPTS
üîπ Windows (CMD)
cmd
Kopiuj
Edytuj
echo %MAVEN_OPTS%
Je≈õli zobaczysz:

ini
Kopiuj
Edytuj
-Dhttps.protocols=TLSv1
‚úÖ Zmienna zosta≈Ça poprawnie ustawiona.

üöÄ Podsumowanie
Metoda	Jak ustawiƒá?	Kiedy u≈ºywaƒá?
Tymczasowe ustawienie	export MAVEN_OPTS="-Dhttps.protocols=TLSv1"	Dzia≈Ça tylko dla aktualnej sesji
Sta≈Çe ustawienie	Dodaj do zmiennych ≈õrodowiskowych	U≈ºyteczne na sta≈Çe w systemie
Jednorazowe wywo≈Çanie	MAVEN_OPTS="-Dhttps.protocols=TLSv1" mvn clean install	Tylko dla jednego polecenia
Teraz Maven poprawnie u≈ºyje TLSv1 podczas uruchamiania mvn clean install! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
toi nie dzia≈Ça MAVEN_OPTS="-Dhttps.protocols=TLSv1" mvn clean install
ChatGPT powiedzia≈Ç:
Dlaczego MAVEN_OPTS="-Dhttps.protocols=TLSv1" mvn clean install nie dzia≈Ça?
MAVEN_OPTS jest u≈ºywane do przekazywania opcji JVM, ale opcja -Dhttps.protocols=TLSv1 jest opcjƒÖ systemowƒÖ i powinna byƒá przekazana bezpo≈õrednio do Mavena jako -D (System Property).

üìå 1Ô∏è‚É£ Poprawny spos√≥b przekazania -Dhttps.protocols=TLSv1 do Maven
Zamiast MAVEN_OPTS, przeka≈º parametr -D bezpo≈õrednio w poleceniu mvn clean install:

sh
Kopiuj
Edytuj
mvn clean install -Dhttps.protocols=TLSv1
‚úÖ To przekazuje opcjƒô TLSv1 bezpo≈õrednio do Mavena.

üìå 2Ô∏è‚É£ Ustawienie MAVEN_OPTS dla opcji JVM
Je≈õli jednak musisz u≈ºywaƒá MAVEN_OPTS, to powiniene≈õ przekazaƒá jƒÖ jako opcjƒô JVM:

sh
Kopiuj
Edytuj
export MAVEN_OPTS="-Dhttps.protocols=TLSv1"
mvn clean install
üìå MAVEN_OPTS dzia≈Ça tylko dla opcji JVM (np. ustawienia pamiƒôci -Xmx1024m).
üìå Ale opcje systemowe jak -Dhttps.protocols=TLSv1 powinny byƒá przekazywane bezpo≈õrednio do mvn.

üìå 3Ô∏è‚É£ Sprawdzenie, czy Maven poprawnie u≈ºywa TLSv1
Mo≈ºesz sprawdziƒá, czy Maven u≈ºywa TLSv1, uruchamiajƒÖc:

sh
Kopiuj
Edytuj
mvn help:system -Dhttps.protocols=TLSv1
Je≈õli konfiguracja jest poprawna, zobaczysz TLSv1 w wynikach.

üìå 4Ô∏è‚É£ Dodanie do sta≈Çej konfiguracji w .mvn/jvm.config
Je≈õli chcesz, aby Maven zawsze u≈ºywa≈Ç TLSv1 bez konieczno≈õci podawania parametru w ka≈ºdej komendzie, dodaj go do pliku konfiguracyjnego:

1Ô∏è‚É£ Utw√≥rz plik .mvn/jvm.config w katalogu g≈Ç√≥wnym projektu Maven:

sh
Kopiuj
Edytuj
mkdir -p .mvn
echo "-Dhttps.protocols=TLSv1" > .mvn/jvm.config
2Ô∏è‚É£ Teraz mvn clean install bƒôdzie automatycznie u≈ºywaƒá TLSv1.

üöÄ Podsumowanie
Metoda	Poprawne u≈ºycie	Dzia≈Ça?
Przekazanie bezpo≈õrednie	mvn clean install -Dhttps.protocols=TLSv1	‚úÖ Tak
U≈ºycie MAVEN_OPTS	export MAVEN_OPTS="-Dhttps.protocols=TLSv1" i mvn clean install	‚ö† Nie dla opcji systemowych
Plik .mvn/jvm.config	Dodanie -Dhttps.protocols=TLSv1 do .mvn/jvm.config	‚úÖ Tak
‚úÖ Najlepsza opcja ‚Üí U≈ºycie -Dhttps.protocols=TLSv1 bezpo≈õrednio w mvn clean install üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
jak wypchnac zmiany do git by widoczne byly jako jeden commit
ChatGPT powiedzia≈Ç:
Jak wypchnƒÖƒá zmiany do Git jako jeden commit?
Je≈õli masz kilka commit√≥w i chcesz je scaliƒá w jeden commit przed wypchniƒôciem do zdalnego repozytorium, wykonaj poni≈ºsze kroki.

üìå 1Ô∏è‚É£ Scalanie commit√≥w przed wypchniƒôciem (git rebase -i HEAD~N)
Je≈õli masz lokalne commity i chcesz je scaliƒá w jeden przed wypchniƒôciem:

sh
Kopiuj
Edytuj
git rebase -i HEAD~N
üîπ Zmie≈Ñ N na liczbƒô commit√≥w, kt√≥re chcesz scaliƒá.
üîπ Je≈õli chcesz scaliƒá np. 3 ostatnie commity, u≈ºyj:

sh
Kopiuj
Edytuj
git rebase -i HEAD~3
üìå Po uruchomieniu zobaczysz edytor, np.:

sql
Kopiuj
Edytuj
pick abc123 Commit 1
pick def456 Commit 2
pick ghi789 Commit 3
üëâ Zamie≈Ñ pick na squash (s) przy kolejnych commitach:

sql
Kopiuj
Edytuj
pick abc123 Commit 1
squash def456 Commit 2
squash ghi789 Commit 3
üìå Nastƒôpnie wpisz nowƒÖ wiadomo≈õƒá commit i zapisz (:wq w Vim).

‚úÖ Teraz Twoje zmiany sƒÖ po≈ÇƒÖczone w jeden commit.

üìå 2Ô∏è‚É£ Wypchniƒôcie zmian jako jeden commit
Po scaleniu commit√≥w wypchnij zmiany:

sh
Kopiuj
Edytuj
git push origin branch-name --force
üëâ --force jest wymagane, poniewa≈º zmienili≈õmy historiƒô commit√≥w.

‚úÖ Teraz zdalne repozytorium widzi tylko jeden commit zamiast wielu.

üìå 3Ô∏è‚É£ Alternatywa: U≈ºycie git commit --amend (je≈õli masz tylko jeden commit)
Je≈õli masz tylko jeden commit, ale chcesz do niego dodaƒá zmiany:

sh
Kopiuj
Edytuj
git add .
git commit --amend -m "Nowy scalony commit"
git push origin branch-name --force
‚úÖ Zamieni ostatni commit na nowy, zamiast tworzyƒá kolejny.

üìå 4Ô∏è‚É£ Reset i utworzenie jednego nowego commita (git reset --soft)
Je≈õli masz wiele commit√≥w i chcesz je usunƒÖƒá, ale zachowaƒá zmiany w plikach, u≈ºyj:

sh
Kopiuj
Edytuj
git reset --soft HEAD~N
git commit -m "Jeden commit po scaleniu"
git push origin branch-name --force
üëâ N = liczba commit√≥w, kt√≥re chcesz scaliƒá.

‚úÖ Teraz ca≈Çy kod jest zapisany jako jeden nowy commit.

üöÄ Podsumowanie
Cel	Polecenie	Uwagi
Scalanie wielu commit√≥w	git rebase -i HEAD~N	U≈ºyj squash, wymaga --force push
Zmiana ostatniego commita	git commit --amend -m "Nowy commit"	Dzia≈Ça tylko dla jednego commita
Reset i utworzenie jednego nowego commita	git reset --soft HEAD~N + git commit -m "Nowy commit"	Dobre do scalania wielu commit√≥w
‚úÖ Najlepsza opcja dla wielu commit√≥w: git rebase -i HEAD~N
‚úÖ Najlepsza opcja dla jednego commita: git commit --amend

Teraz mo≈ºesz wypchnƒÖƒá zmiany jako jeden commit! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
w jaki spos√≥b dodaƒá zmiennƒÖ do gitlab ci cd i wykorzystaƒá jƒÖ nastƒôpnie w konfiguracji pipeline?
ChatGPT powiedzia≈Ç:
üìå Jak dodaƒá zmiennƒÖ do GitLab CI/CD i u≈ºyƒá jej w konfiguracji pipeline?
W GitLab CI/CD mo≈ºesz dodaƒá zmiennƒÖ na dwa sposoby:

Przez interfejs GitLab (najlepsza opcja dla hase≈Ç, token√≥w API)
Bezpo≈õrednio w .gitlab-ci.yml (dla warto≈õci niezawierajƒÖcych wra≈ºliwych danych)
1Ô∏è‚É£ Dodanie zmiennej w interfejsie GitLab
Przejd≈∫ do GitLab ‚Üí Project ‚Üí Settings ‚Üí CI/CD
Kliknij "Expand" przy "Variables"
Kliknij "Add variable"
Wprowad≈∫:
Key (nazwa zmiennej): MY_VARIABLE
Value (warto≈õƒá zmiennej): Hello GitLab!
Type: Variable
Masked: (W≈ÇƒÖcz dla hase≈Ç/token√≥w)
Protected: (W≈ÇƒÖcz, je≈õli ma dzia≈Çaƒá tylko na protected branches)
Kliknij "Save"
‚úÖ Teraz zmienna MY_VARIABLE jest dostƒôpna w pipeline.

2Ô∏è‚É£ Wykorzystanie zmiennej w .gitlab-ci.yml
Teraz mo≈ºesz u≈ºyƒá tej zmiennej w swoim GitLab pipeline.

üîπ 2.1 U≈ºycie zmiennej w script
yaml
Kopiuj
Edytuj
test_job:
  stage: test
  script:
    - echo "Zmienna to: $MY_VARIABLE"
‚úÖ Pipeline wydrukuje:

css
Kopiuj
Edytuj
Zmienna to: Hello GitLab!
üîπ 2.2 U≈ºycie zmiennej w before_script
yaml
Kopiuj
Edytuj
default:
  before_script:
    - echo "Przygotowanie: $MY_VARIABLE"

test_job:
  stage: test
  script:
    - echo "Uruchamianie test√≥w..."
‚úÖ Wydrukuje przed ka≈ºdym jobem.

üîπ 2.3 U≈ºycie w only (warunkowe uruchamianie job√≥w)
yaml
Kopiuj
Edytuj
deploy_job:
  stage: deploy
  script:
    - echo "Wdra≈ºanie aplikacji..."
  only:
    - $DEPLOY_ENVIRONMENT  # Job uruchomi siƒô tylko, je≈õli zmienna jest ustawiona
3Ô∏è‚É£ Dodanie zmiennej bezpo≈õrednio w .gitlab-ci.yml
Je≈õli zmienna nie zawiera wra≈ºliwych danych, mo≈ºna jƒÖ dodaƒá w variables:

yaml
Kopiuj
Edytuj
variables:
  MY_VARIABLE: "Hello from YAML!"

test_job:
  stage: test
  script:
    - echo "Zmienna z YAML: $MY_VARIABLE"
‚úÖ Teraz zmienna MY_VARIABLE bƒôdzie dostƒôpna dla ka≈ºdego joba.

4Ô∏è‚É£ Wykorzystanie zmiennej w poleceniach systemowych
üîπ Ustawienie zmiennej dla Mavena
yaml
Kopiuj
Edytuj
maven_build:
  stage: build
  script:
    - mvn clean install -Dcustom.property="$MY_VARIABLE"
‚úÖ Maven dostanie -Dcustom.property="Hello GitLab!".

üîπ U≈ºycie zmiennej jako ≈õcie≈ºki
yaml
Kopiuj
Edytuj
deploy:
  stage: deploy
  script:
    - echo "Przesy≈Çanie plik√≥w do: $DEPLOY_PATH"
5Ô∏è‚É£ Sprawdzenie warto≈õci zmiennej w debug mode
Je≈õli nie jeste≈õ pewien, czy zmienna jest dostƒôpna, dodaj:

yaml
Kopiuj
Edytuj
debug_job:
  stage: debug
  script:
    - echo "DEBUG: MY_VARIABLE=$MY_VARIABLE"
‚úÖ Je≈õli zmienna jest pusta, oznacza to, ≈ºe:

Nie zosta≈Ça dodana w Settings ‚Üí CI/CD ‚Üí Variables
Jest masked i zawiera znak * (nie bƒôdzie widoczna)
üöÄ Podsumowanie
Metoda	Kiedy u≈ºywaƒá?	Bezpiecze≈Ñstwo
Interfejs GitLab ‚Üí Settings ‚Üí CI/CD ‚Üí Variables	Has≈Ça, tokeny API	üîí Bezpieczna (maskowanie)
Zmienne w .gitlab-ci.yml (variables:)	Niewra≈ºliwe dane (np. ≈õcie≈ºki)	üîì Widoczne w repo
Bezpo≈õrednio w script (-Dproperty="$MY_VARIABLE")	Przekazywanie do narzƒôdzi (Maven, Node)	üîì Widoczne w logach
‚úÖ Najbezpieczniejsza opcja: Dodawanie zmiennych w GitLab CI/CD Settings
‚úÖ Najprostsza opcja: Dodanie do variables: w .gitlab-ci.yml

Teraz masz pe≈ÇnƒÖ kontrolƒô nad zmiennymi w GitLab CI/CD! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
jaki jest odpowiednik metod removeEnd() oraz removeStart() z java w klasie StringUtils w typescript?
ChatGPT powiedzia≈Ç:
W TypeScript nie ma wbudowanych metod removeEnd() i removeStart(), ale mo≈ºna je ≈Çatwo zaimplementowaƒá przy u≈ºyciu metod startsWith() i endsWith().

üìå 1Ô∏è‚É£ Odpowiednik removeStart()
Metoda removeStart() usuwa okre≈õlony prefiks, je≈õli istnieje.

Java (StringUtils.removeStart()):

java
Kopiuj
Edytuj
String result = StringUtils.removeStart("HelloWorld", "Hello"); // "World"
TypeScript:

typescript
Kopiuj
Edytuj
function removeStart(str: string, prefix: string): string {
  return str.startsWith(prefix) ? str.slice(prefix.length) : str;
}

// ‚úÖ Przyk≈Çad u≈ºycia
console.log(removeStart("HelloWorld", "Hello")); // "World"
console.log(removeStart("TestString", "Test"));  // "String"
console.log(removeStart("Example", "NoMatch")); // "Example" (bez zmian)
üìå 2Ô∏è‚É£ Odpowiednik removeEnd()
Metoda removeEnd() usuwa okre≈õlony sufiks, je≈õli istnieje.

Java (StringUtils.removeEnd()):

java
Kopiuj
Edytuj
String result = StringUtils.removeEnd("HelloWorld", "World"); // "Hello"
TypeScript:

typescript
Kopiuj
Edytuj
function removeEnd(str: string, suffix: string): string {
  return str.endsWith(suffix) ? str.slice(0, -suffix.length) : str;
}

// ‚úÖ Przyk≈Çad u≈ºycia
console.log(removeEnd("HelloWorld", "World"));  // "Hello"
console.log(removeEnd("TestString", "String")); // "Test"
console.log(removeEnd("Example", "NoMatch"));  // "Example" (bez zmian)
üìå 3Ô∏è‚É£ Wersja z klasƒÖ StringUtils
Je≈õli chcesz utworzyƒá odpowiednik klasy StringUtils, mo≈ºesz zdefiniowaƒá w≈ÇasnƒÖ klasƒô:

typescript
Kopiuj
Edytuj
class StringUtils {
  static removeStart(str: string, prefix: string): string {
    return str.startsWith(prefix) ? str.slice(prefix.length) : str;
  }

  static removeEnd(str: string, suffix: string): string {
    return str.endsWith(suffix) ? str.slice(0, -suffix.length) : str;
  }
}

// ‚úÖ Przyk≈Çady u≈ºycia
console.log(StringUtils.removeStart("HelloWorld", "Hello")); // "World"
console.log(StringUtils.removeEnd("HelloWorld", "World"));   // "Hello"
üöÄ Podsumowanie
Java (StringUtils)	TypeScript
StringUtils.removeStart("HelloWorld", "Hello") ‚Üí "World"	removeStart("HelloWorld", "Hello") ‚Üí "World"
StringUtils.removeEnd("HelloWorld", "World") ‚Üí "Hello"	removeEnd("HelloWorld", "World") ‚Üí "Hello"
Teraz masz w pe≈Çni funkcjonalny odpowiednik metod removeStart() i removeEnd() w TypeScript! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
jak wskazaƒá w parametrze FileInputStrea() lokalizacjƒô pliku z properties
ChatGPT powiedzia≈Ç:
Aby wskazaƒá lokalizacjƒô pliku .properties w parametrze FileInputStream() w Java, mo≈ºesz u≈ºyƒá kilku metod, w zale≈ºno≈õci od tego, gdzie znajduje siƒô plik.

üìå 1Ô∏è‚É£ Je≈õli plik .properties znajduje siƒô w katalogu projektu
Je≈õli plik config.properties znajduje siƒô w g≈Ç√≥wnym katalogu projektu lub w katalogu resources, mo≈ºesz u≈ºyƒá FileInputStream z System.getProperty("user.dir"):

java
Kopiuj
Edytuj
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class ConfigReader {
    public static void main(String[] args) {
        Properties properties = new Properties();
        String filePath = System.getProperty("user.dir") + "/config.properties"; // Pe≈Çna ≈õcie≈ºka do pliku

        try (FileInputStream fileInputStream = new FileInputStream(filePath)) {
            properties.load(fileInputStream);
            System.out.println("Warto≈õƒá: " + properties.getProperty("myKey"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
‚úÖ System.getProperty("user.dir") zwraca katalog, w kt√≥rym uruchamiany jest program, co pozwala dynamicznie okre≈õliƒá ≈õcie≈ºkƒô.

üìå 2Ô∏è‚É£ Je≈õli plik .properties znajduje siƒô w katalogu src/main/resources (dla Maven/Gradle)
W aplikacjach Maven/Gradle pliki .properties sƒÖ zazwyczaj umieszczane w src/main/resources. Mo≈ºna wtedy u≈ºyƒá ClassLoader:

java
Kopiuj
Edytuj
import java.io.InputStream;
import java.util.Properties;

public class ConfigReader {
    public static void main(String[] args) {
        Properties properties = new Properties();

        try (InputStream inputStream = ConfigReader.class.getClassLoader().getResourceAsStream("config.properties")) {
            if (inputStream == null) {
                throw new IOException("Plik nie zosta≈Ç znaleziony!");
            }
            properties.load(inputStream);
            System.out.println("Warto≈õƒá: " + properties.getProperty("myKey"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
‚úÖ getResourceAsStream() ≈Çaduje plik z src/main/resources, co dzia≈Ça poprawnie w aplikacjach budowanych z Maven/Gradle.

üìå 3Ô∏è‚É£ Je≈õli plik .properties jest w innej, konkretnej lokalizacji
Je≈õli plik znajduje siƒô np. w C:\config\settings.properties lub /etc/config/settings.properties, mo≈ºesz u≈ºyƒá pe≈Çnej ≈õcie≈ºki:

java
Kopiuj
Edytuj
String filePath = "C:/config/settings.properties"; // Windows
String filePath = "/etc/config/settings.properties"; // Linux/macOS

try (FileInputStream fileInputStream = new FileInputStream(filePath)) {
    properties.load(fileInputStream);
}
‚úÖ Nale≈ºy u≈ºyƒá podw√≥jnych backslashy \\ w Windows, je≈õli wpisujesz ≈õcie≈ºkƒô rƒôcznie w kodzie:

java
Kopiuj
Edytuj
String filePath = "C:\\config\\settings.properties";
üìå 4Ô∏è‚É£ Pobieranie ≈õcie≈ºki pliku z parametru wiersza polece≈Ñ
Je≈õli chcesz, aby u≈ºytkownik podawa≈Ç ≈õcie≈ºkƒô do pliku .properties jako argument:

java
Kopiuj
Edytuj
public class ConfigReader {
    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("Podaj ≈õcie≈ºkƒô do pliku jako argument!");
            return;
        }

        String filePath = args[0];
        Properties properties = new Properties();

        try (FileInputStream fileInputStream = new FileInputStream(filePath)) {
            properties.load(fileInputStream);
            System.out.println("Warto≈õƒá: " + properties.getProperty("myKey"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
Uruchamiasz program z podanƒÖ ≈õcie≈ºkƒÖ:

sh
Kopiuj
Edytuj
java ConfigReader "/home/user/config.properties"
üìå Podsumowanie
Gdzie jest plik .properties?	Spos√≥b otwarcia
W g≈Ç√≥wnym katalogu projektu	new FileInputStream(System.getProperty("user.dir") + "/config.properties")
W src/main/resources (Maven/Gradle)	getClass().getClassLoader().getResourceAsStream("config.properties")
W konkretnej ≈õcie≈ºce np. C:/config/	new FileInputStream("C:/config/settings.properties")
Pobieranie ≈õcie≈ºki jako argument	new FileInputStream(args[0])
‚úÖ Najlepsza opcja dla Maven/Gradle: getResourceAsStream().
‚úÖ Najlepsza opcja dla konfiguracji systemowej: Pe≈Çna ≈õcie≈ºka /etc/config/ lub C:/config/.
‚úÖ Najbardziej elastyczna opcja: Pobieranie ≈õcie≈ºki z parametru CLI.

Teraz mo≈ºesz ≈Çatwo wczytaƒá plik .properties w Java! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
plik znajduje sie w test\resources\config\uat.properties
ChatGPT powiedzia≈Ç:
Je≈õli Tw√≥j plik uat.properties znajduje siƒô w katalogu test/resources/config/, to mo≈ºesz go za≈Çadowaƒá w Java na kilka sposob√≥w.

üìå 1Ô∏è‚É£ U≈ºycie getResourceAsStream() (dla test√≥w w test/resources/)
Je≈õli plik znajduje siƒô w katalogu test/resources/config/, to najlepszym sposobem jest u≈ºycie ClassLoader, poniewa≈º test/resources/ jest automatycznie dodawane do classpath w czasie test√≥w.

Kod Java:
java
Kopiuj
Edytuj
import java.io.InputStream;
import java.util.Properties;

public class ConfigReader {
    public static void main(String[] args) {
        Properties properties = new Properties();

        try (InputStream inputStream = ConfigReader.class.getClassLoader().getResourceAsStream("config/uat.properties")) {
            if (inputStream == null) {
                throw new RuntimeException("Plik nie zosta≈Ç znaleziony!");
            }
            properties.load(inputStream);
            System.out.println("Warto≈õƒá: " + properties.getProperty("myKey"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
‚úÖ Dlaczego getResourceAsStream("config/uat.properties")?

Dzia≈Ça w test/resources/ (Maven automatycznie dodaje test/resources do classpath).
Nie musisz podawaƒá pe≈Çnej ≈õcie≈ºki ‚Äì wystarczy ≈õcie≈ºka wzglƒôdem resources/.
Plik jest ≈Çadowany poprawnie zar√≥wno w lokalnym IDE, jak i w CI/CD.
üìå 2Ô∏è‚É£ U≈ºycie FileInputStream() (gdy nie dzia≈Ça getResourceAsStream())
Je≈õli plik nie jest dostƒôpny w classpath lub chcesz podaƒá pe≈ÇnƒÖ ≈õcie≈ºkƒô, mo≈ºesz u≈ºyƒá FileInputStream().

Kod Java:
java
Kopiuj
Edytuj
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class ConfigReader {
    public static void main(String[] args) {
        Properties properties = new Properties();
        String filePath = "src/test/resources/config/uat.properties"; // Pe≈Çna ≈õcie≈ºka do pliku

        try (FileInputStream fileInputStream = new FileInputStream(filePath)) {
            properties.load(fileInputStream);
            System.out.println("Warto≈õƒá: " + properties.getProperty("myKey"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
‚úÖ Kiedy u≈ºywaƒá FileInputStream?

Je≈õli uruchamiasz testy w IDE, ale Maven nie widzi pliku test/resources.
Je≈õli potrzebujesz ≈õcie≈ºki pe≈Çnej, a nie z classpath.
Dzia≈Ça zar√≥wno lokalnie, jak i w CI/CD.
‚ùó UWAGA: W Maven test/resources/ nie zawsze jest kopiowane do target/classes. Dlatego getResourceAsStream() jest bardziej niezawodne.

üìå 3Ô∏è‚É£ U≈ºycie System.getProperty() do dynamicznej ≈õcie≈ºki
Je≈õli plik ma dynamicznƒÖ ≈õcie≈ºkƒô (np. zale≈ºnƒÖ od konfiguracji systemu), mo≈ºna pobraƒá go poprzez zmiennƒÖ systemowƒÖ:

Kod Java:
java
Kopiuj
Edytuj
String filePath = System.getProperty("user.dir") + "/src/test/resources/config/uat.properties";
try (FileInputStream fileInputStream = new FileInputStream(filePath)) {
    properties.load(fileInputStream);
}
‚úÖ Dzia≈Ça niezale≈ºnie od ≈õrodowiska (lokalnie i na CI/CD).
‚úÖ Nie wymaga hardcodowania ≈õcie≈ºki.

üìå 4Ô∏è‚É£ Wykorzystanie JUnit do wczytania pliku w testach
Je≈õli u≈ºywasz JUnit, najlepiej wykorzystaƒá getResourceAsStream() w testach:

java
Kopiuj
Edytuj
import org.junit.jupiter.api.Test;
import java.io.InputStream;
import java.util.Properties;
import static org.junit.jupiter.api.Assertions.*;

public class ConfigTest {
    @Test
    void testLoadProperties() throws Exception {
        Properties properties = new Properties();
        InputStream inputStream = getClass().getClassLoader().getResourceAsStream("config/uat.properties");
        assertNotNull(inputStream, "Plik config/uat.properties nie zosta≈Ç znaleziony!");

        properties.load(inputStream);
        assertEquals("expectedValue", properties.getProperty("myKey"));
    }
}
‚úÖ Dzia≈Ça wewnƒÖtrz test√≥w jednostkowych.
‚úÖ Nie wymaga podawania pe≈Çnej ≈õcie≈ºki.

üöÄ Podsumowanie
Metoda	Kod Java	Kiedy u≈ºywaƒá?
Najlepsza opcja (test/resources)	getClass().getClassLoader().getResourceAsStream("config/uat.properties")	Je≈õli plik jest w test/resources/, dzia≈Ça z Mavenem
Gdy getResourceAsStream() nie dzia≈Ça	new FileInputStream("src/test/resources/config/uat.properties")	Je≈õli Maven nie kopiuje test/resources/
Dynamika (System.getProperty())	System.getProperty("user.dir") + "/src/test/resources/config/uat.properties"	Je≈õli ≈õcie≈ºka mo≈ºe siƒô zmieniaƒá
JUnit (assertNotNull)	assertNotNull(getClass().getClassLoader().getResourceAsStream("config/uat.properties"))	Je≈õli plik ma byƒá u≈ºywany w testach jednostkowych
‚úÖ Najlepsza opcja dla test√≥w: getResourceAsStream("config/uat.properties")
‚úÖ Najlepsza opcja dla plik√≥w spoza classpath: FileInputStream("src/test/resources/...")

Teraz mo≈ºesz bezproblemowo ≈Çadowaƒá pliki .properties w test/resources/ w Java! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
czy w tym rozwiƒÖzaniu mo≈ºna filePath parametryzowa? import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class ConfigReader {
    public static void main(String[] args) {
        Properties properties = new Properties();
        String filePath = "src/test/resources/config/uat.properties"; // Pe≈Çna ≈õcie≈ºka do pliku

        try (FileInputStream fileInputStream = new FileInputStream(filePath)) {
            properties.load(fileInputStream);
            System.out.println("Warto≈õƒá: " + properties.getProperty("myKey"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
ChatGPT powiedzia≈Ç:
Tak, mo≈ºna sparametryzowaƒá filePath w kilku sposobach
Je≈õli chcesz, aby ≈õcie≈ºka filePath by≈Ça dynamiczna, oto kilka opcji:

üìå 1Ô∏è‚É£ Pobranie ≈õcie≈ºki jako argument wiersza polece≈Ñ
Mo≈ºesz pozwoliƒá u≈ºytkownikowi podaƒá ≈õcie≈ºkƒô jako argument przy uruchomieniu programu.

Kod Java:
java
Kopiuj
Edytuj
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class ConfigReader {
    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("‚ùå Podaj ≈õcie≈ºkƒô do pliku .properties jako argument!");
            return;
        }

        String filePath = args[0]; // Pobranie ≈õcie≈ºki z argumentu CLI
        Properties properties = new Properties();

        try (FileInputStream fileInputStream = new FileInputStream(filePath)) {
            properties.load(fileInputStream);
            System.out.println("Warto≈õƒá: " + properties.getProperty("myKey"));
        } catch (IOException e) {
            System.out.println("‚ùå B≈ÇƒÖd podczas ≈Çadowania pliku: " + filePath);
            e.printStackTrace();
        }
    }
}
‚úÖ Jak uruchomiƒá?

sh
Kopiuj
Edytuj
java ConfigReader "src/test/resources/config/uat.properties"
‚úÖ Dziƒôki temu mo≈ºesz zmieniaƒá plik bez modyfikacji kodu.

üìå 2Ô∏è‚É£ Pobranie ≈õcie≈ºki z zmiennej ≈õrodowiskowej
Je≈õli chcesz, aby ≈õcie≈ºka by≈Ça pobierana dynamicznie z systemowej zmiennej ≈õrodowiskowej, mo≈ºesz u≈ºyƒá:

Kod Java:
java
Kopiuj
Edytuj
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class ConfigReader {
    public static void main(String[] args) {
        String filePath = System.getenv("CONFIG_PATH"); // Pobranie zmiennej ≈õrodowiskowej

        if (filePath == null || filePath.isEmpty()) {
            System.out.println("‚ùå Zmienna ≈õrodowiskowa CONFIG_PATH nie jest ustawiona!");
            return;
        }

        Properties properties = new Properties();

        try (FileInputStream fileInputStream = new FileInputStream(filePath)) {
            properties.load(fileInputStream);
            System.out.println("Warto≈õƒá: " + properties.getProperty("myKey"));
        } catch (IOException e) {
            System.out.println("‚ùå B≈ÇƒÖd podczas ≈Çadowania pliku: " + filePath);
            e.printStackTrace();
        }
    }
}
‚úÖ Jak ustawiƒá zmiennƒÖ ≈õrodowiskowƒÖ i uruchomiƒá program?

üîπ Linux/macOS
sh
Kopiuj
Edytuj
export CONFIG_PATH="src/test/resources/config/uat.properties"
java ConfigReader
üîπ Windows (PowerShell)
powershell
Kopiuj
Edytuj
$env:CONFIG_PATH="src/test/resources/config/uat.properties"
java ConfigReader
üîπ Windows (CMD)
cmd
Kopiuj
Edytuj
set CONFIG_PATH=src/test/resources/config/uat.properties
java ConfigReader
‚úÖ ≈öcie≈ºka bƒôdzie pobierana dynamicznie!

üìå 3Ô∏è‚É£ Pobranie ≈õcie≈ºki z System.getProperty() (z -D w JVM)
Innym sposobem jest przekazanie ≈õcie≈ºki przez System.getProperty(), co pozwala ustawiƒá jƒÖ w konfiguracji JVM.

Kod Java:
java
Kopiuj
Edytuj
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class ConfigReader {
    public static void main(String[] args) {
        String filePath = System.getProperty("config.path", "src/test/resources/config/uat.properties"); // Domy≈õlna warto≈õƒá

        Properties properties = new Properties();

        try (FileInputStream fileInputStream = new FileInputStream(filePath)) {
            properties.load(fileInputStream);
            System.out.println("Warto≈õƒá: " + properties.getProperty("myKey"));
        } catch (IOException e) {
            System.out.println("‚ùå B≈ÇƒÖd podczas ≈Çadowania pliku: " + filePath);
            e.printStackTrace();
        }
    }
}
‚úÖ Jak przekazaƒá ≈õcie≈ºkƒô przez JVM?

sh
Kopiuj
Edytuj
java -Dconfig.path="src/test/resources/config/uat.properties" ConfigReader
‚úÖ Je≈õli -Dconfig.path nie zostanie podane, u≈ºyje domy≈õlnej ≈õcie≈ºki.

üìå 4Ô∏è‚É£ Pobranie pliku na podstawie ≈õrodowiska (UAT, PROD, DEV)
Je≈õli chcesz dynamicznie wybieraƒá plik konfiguracyjny na podstawie ≈õrodowiska, mo≈ºesz u≈ºyƒá zmiennej ≈õrodowiskowej ENVIRONMENT.

Kod Java:
java
Kopiuj
Edytuj
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class ConfigReader {
    public static void main(String[] args) {
        String env = System.getenv("ENVIRONMENT"); // Pobranie nazwy ≈õrodowiska
        if (env == null || env.isEmpty()) {
            env = "uat"; // Domy≈õlnie u≈ºyj "uat"
        }

        String filePath = "src/test/resources/config/" + env + ".properties"; // Dynamiczna ≈õcie≈ºka

        Properties properties = new Properties();

        try (FileInputStream fileInputStream = new FileInputStream(filePath)) {
            properties.load(fileInputStream);
            System.out.println("Warto≈õƒá: " + properties.getProperty("myKey"));
        } catch (IOException e) {
            System.out.println("‚ùå B≈ÇƒÖd podczas ≈Çadowania pliku: " + filePath);
            e.printStackTrace();
        }
    }
}
‚úÖ Jak zmieniaƒá ≈õrodowisko?

sh
Kopiuj
Edytuj
export ENVIRONMENT=prod  # U≈ºyje config/prod.properties
java ConfigReader
sh
Kopiuj
Edytuj
export ENVIRONMENT=dev  # U≈ºyje config/dev.properties
java ConfigReader
‚úÖ Teraz mo≈ºesz u≈ºywaƒá r√≥≈ºnych plik√≥w .properties w zale≈ºno≈õci od ≈õrodowiska.

üöÄ Podsumowanie
Metoda	Jak dzia≈Ça?	Jak uruchomiƒá?
Argument wiersza polece≈Ñ	args[0]	java ConfigReader "path/to/file.properties"
Zmienna ≈õrodowiskowa	System.getenv("CONFIG_PATH")	export CONFIG_PATH="path/to/file.properties"
System.getProperty() (-Dconfig.path)	System.getProperty("config.path")	java -Dconfig.path="path/to/file.properties" ConfigReader
Dynamiczna konfiguracja (UAT, DEV, PROD)	System.getenv("ENVIRONMENT") ‚Üí config/env.properties	export ENVIRONMENT=prod
‚úÖ Najlepsze opcje
‚úÖ Je≈õli chcesz, aby plik by≈Ç podawany dynamicznie przez u≈ºytkownika ‚Üí args[0]
‚úÖ Je≈õli konfiguracja ma byƒá ustawiana na poziomie systemu ‚Üí System.getenv("CONFIG_PATH")
‚úÖ Je≈õli chcesz dynamicznie wybieraƒá plik dla ≈õrodowiska (UAT, DEV, PROD) ‚Üí System.getenv("ENVIRONMENT")
‚úÖ Je≈õli chcesz ustawiaƒá ≈õcie≈ºkƒô w JVM (-D flag) ‚Üí System.getProperty("config.path")

Teraz filePath jest sparametryzowany, a program mo≈ºe dynamicznie ≈Çadowaƒá plik .properties w zale≈ºno≈õci od ustawie≈Ñ! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
przet≈Çumacz "Kiedy moge spodziewaƒá siƒô nowego przed≈Çu≈ºonego kontraktu z UBS do podpisania" na angielski 
ChatGPT powiedzia≈Ç:
"When can I expect the new extended contract with UBS for signing?"






Powiedzia≈Çe≈õ(-a≈õ):
co to jest smtp mailbox service
ChatGPT powiedzia≈Ç:
üìå SMTP Mailbox Service ‚Äì Co to jest?
SMTP Mailbox Service to us≈Çuga pocztowa oparta na protokole SMTP (Simple Mail Transfer Protocol), kt√≥ra umo≈ºliwia wysy≈Çanie wiadomo≈õci e-mail. Jest u≈ºywana g≈Ç√≥wnie przez serwery pocztowe, aplikacje i systemy do przekazywania e-maili do odbiorc√≥w.

üìå Jak dzia≈Ça SMTP Mailbox Service?
Aplikacja lub klient e-mail (np. Outlook, Gmail, aplikacja firmowa) wysy≈Ça e-mail poprzez serwer SMTP.
Serwer SMTP przyjmuje wiadomo≈õƒá, sprawdza jej poprawno≈õƒá i przekazuje jƒÖ dalej.
Je≈õli adres odbiorcy jest na innym serwerze, SMTP u≈ºywa DNS do znalezienia odpowiedniego serwera pocztowego.
Po znalezieniu w≈Ça≈õciwego serwera przekazuje wiadomo≈õƒá do odbiorcy.
üìå Przyk≈Çady u≈ºycia SMTP Mailbox Service
‚úÖ Firmowe serwery pocztowe ‚Äì Wysy≈Çanie e-maili wewnƒôtrznych i zewnƒôtrznych.
‚úÖ Aplikacje webowe ‚Äì Systemy rejestracji u≈ºytkownik√≥w, resetowania hase≈Ç.
‚úÖ Systemy monitorowania i powiadomie≈Ñ ‚Äì Automatyczne alerty e-mail.
‚úÖ Newslettery i kampanie marketingowe ‚Äì Masowa wysy≈Çka wiadomo≈õci.

üìå Popularne serwery SMTP
üîπ Google SMTP (Gmail) ‚Üí smtp.gmail.com
üîπ Microsoft Outlook/Office365 ‚Üí smtp.office365.com
üîπ Amazon SES ‚Üí Us≈Çuga wysy≈Çki masowej
üîπ SendGrid, Postmark, Mailgun ‚Üí Us≈Çugi SMTP dla aplikacji

üìå SMTP vs IMAP/POP3
Protok√≥≈Ç	Zastosowanie
SMTP (Simple Mail Transfer Protocol)	Wysy≈Çanie wiadomo≈õci
IMAP (Internet Message Access Protocol)	Odbieranie wiadomo≈õci, synchronizacja
POP3 (Post Office Protocol)	Pobieranie wiadomo≈õci na urzƒÖdzenie
‚úÖ SMTP s≈Çu≈ºy do wysy≈Çania, natomiast IMAP/POP3 do odbierania e-maili.

üìå Jak skonfigurowaƒá SMTP Mailbox Service?
Je≈õli chcesz wysy≈Çaƒá e-maile za pomocƒÖ SMTP, musisz skonfigurowaƒá:

Serwer SMTP (np. smtp.example.com)
Port (zazwyczaj 587 dla TLS, 465 dla SSL, 25 bez szyfrowania)
Uwierzytelnienie (nazwa u≈ºytkownika i has≈Ço)
Szyfrowanie (TLS/SSL)
Przyk≈Çad konfiguracji w Python:

python
Kopiuj
Edytuj
import smtplib

server = smtplib.SMTP("smtp.example.com", 587)
server.starttls()  # W≈ÇƒÖczenie TLS
server.login("user@example.com", "password")
server.sendmail("user@example.com", "recipient@example.com", "Subject: Hello!\n\nThis is a test email.")
server.quit()
üöÄ Podsumowanie
üîπ SMTP Mailbox Service to us≈Çuga umo≈ºliwiajƒÖca wysy≈Çanie e-maili za pomocƒÖ SMTP.
üîπ Jest u≈ºywana w aplikacjach webowych, systemach powiadomie≈Ñ i newsletterach.
üîπ SMTP tylko wysy≈Ça e-maile ‚Äì odbieranie wymaga IMAP lub POP3.
üîπ Popularne serwery SMTP to Gmail, Outlook, SendGrid, Mailgun.
üîπ Do konfiguracji SMTP potrzebujesz serwera, portu, uwierzytelnienia i szyfrowania.

Teraz wiesz, czym jest SMTP Mailbox Service i jak go u≈ºywaƒá! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
co to robie w gitlab --MAVEN_CLI_OPTS: "--batch-mode"
ChatGPT powiedzia≈Ç:
üìå Co robi --MAVEN_CLI_OPTS: "--batch-mode" w GitLab CI/CD?
MAVEN_CLI_OPTS to zmienna ≈õrodowiskowa, kt√≥ra w GitLab CI/CD mo≈ºe byƒá u≈ºywana do przekazywania opcji do Mavena w pipeline.
Opcja --batch-mode (-B) w Maven prze≈ÇƒÖcza Mavena w tryb batchowy, co oznacza:

‚úÖ Brak interaktywnych pyta≈Ñ (Maven nie bƒôdzie czekaƒá na input u≈ºytkownika)
‚úÖ Czystsze i bardziej czytelne logi w GitLab CI/CD
‚úÖ Szybsze dzia≈Çanie pipeline'√≥w (mniej zapyta≈Ñ o potwierdzenia)

üìå Jak to dzia≈Ça w .gitlab-ci.yml?
Je≈õli masz w .gitlab-ci.yml zmiennƒÖ:

yaml
Kopiuj
Edytuj
variables:
  MAVEN_CLI_OPTS: "--batch-mode"
I w jobie:

yaml
Kopiuj
Edytuj
build:
  stage: build
  script:
    - mvn clean install $MAVEN_CLI_OPTS
To pipeline wykona:

sh
Kopiuj
Edytuj
mvn clean install --batch-mode
Zamiast:

sh
Kopiuj
Edytuj
mvn clean install
‚úÖ Dziƒôki temu logi bƒôdƒÖ czystsze, a pipeline nie bƒôdzie czeka≈Ç na interakcjƒô.

üìå Dlaczego warto u≈ºywaƒá --batch-mode w GitLab CI/CD?
Eliminuje interakcjƒô u≈ºytkownika

Maven czasami zadaje pytania (Y/N), np. przy kluczach GPG.
--batch-mode wy≈ÇƒÖcza te pytania i u≈ºywa domy≈õlnych warto≈õci.
Czystsze logi w GitLab CI/CD

Usuwa niepotrzebne interaktywne komunikaty.
Przyk≈Çad r√≥≈ºnicy: Bez --batch-mode (z interaktywnymi komunikatami)
bash
Kopiuj
Edytuj
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/... (TRYING)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/... (TRYING)
[INFO] Confirm installation (Y/N)?
Z --batch-mode (czystsze logi)
csharp
Kopiuj
Edytuj
[INFO] Downloading dependencies...
[INFO] Build SUCCESS
Mniejsza szansa na zawieszenie pipeline

Je≈õli Maven wymaga inputu, pipeline mo≈ºe zawiesiƒá siƒô bez --batch-mode.
Optymalizacja dla CI/CD

GitLab Runner nie potrzebuje interakcji, wiƒôc --batch-mode pozwala mu dzia≈Çaƒá w pe≈Çni automatycznie.
üìå Kiedy warto dodaƒá inne opcje do MAVEN_CLI_OPTS?
Mo≈ºesz dodaƒá inne optymalizacje do MAVEN_CLI_OPTS:

yaml
Kopiuj
Edytuj
variables:
  MAVEN_CLI_OPTS: "--batch-mode --fail-at-end --no-transfer-progress"
--fail-at-end ‚Üí Maven kontynuuje budowanie, nawet je≈õli czƒô≈õƒá modu≈Ç√≥w nie dzia≈Ça.
--no-transfer-progress ‚Üí Ukrywa pasek pobierania zale≈ºno≈õci (czystsze logi).
Teraz w GitLab CI/CD polecenie:

sh
Kopiuj
Edytuj
mvn clean install $MAVEN_CLI_OPTS
Wykona siƒô jako:

sh
Kopiuj
Edytuj
mvn clean install --batch-mode --fail-at-end --no-transfer-progress
üöÄ Podsumowanie
üîπ --batch-mode (-B) ‚Üí Tryb bez interakcji (szybszy pipeline, czystsze logi).
üîπ U≈ºywane w MAVEN_CLI_OPTS w .gitlab-ci.yml, aby przekazaƒá domy≈õlne opcje do Mavena.
üîπ Pomaga unikaƒá zawiesze≈Ñ pipeline i zbƒôdnych komunikat√≥w w logach.
üîπ Mo≈ºna dodaƒá wiƒôcej opcji (--fail-at-end, --no-transfer-progress) dla lepszej optymalizacji.

Dziƒôki temu GitLab CI/CD dzia≈Ça szybciej i stabilniej! üöÄ






Powiedzia≈Çe≈õ(-a≈õ):
napisz metodƒô, kt√≥ra wykonana w dowolnej klasie wydobƒôdzie dane z pliku uat.properties znajdujƒÖcego siƒô w test/resources/env/config/uat.properties
ChatGPT powiedzia≈Ç:
Oto uniwersalna metoda, kt√≥ra mo≈ºe byƒá wywo≈Çana w dowolnej klasie i pobierze dane z pliku uat.properties, znajdujƒÖcego siƒô w test/resources/env/config/uat.properties.

üìå 1Ô∏è‚É£ Metoda do pobierania w≈Ça≈õciwo≈õci
Tworzymy metodƒô loadProperties(), kt√≥ra pobiera warto≈õci z pliku .properties.

java
Kopiuj
Edytuj
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class ConfigLoader {

    private static final String FILE_PATH = "test/resources/env/config/uat.properties";

    public static Properties loadProperties() {
        Properties properties = new Properties();
        try (InputStream inputStream = new FileInputStream(FILE_PATH)) {
            properties.load(inputStream);
        } catch (IOException e) {
            throw new RuntimeException("‚ùå B≈ÇƒÖd podczas ≈Çadowania pliku: " + FILE_PATH, e);
        }
        return properties;
    }

    public static String getProperty(String key) {
        return loadProperties().getProperty(key);
    }
}
