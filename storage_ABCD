import { request, APIRequestContext } from 'playwright';

class API {
  private requestContext: APIRequestContext | null = null; // Kontekst żądań API

  // Metoda do tworzenia instancji z konfiguracją proxy, credentials i baseURL
  async createInstance(config: {
    baseURL: string;
    proxy: { server: string; username: string; password: string };
    httpCredentials: { username: string; password: string };
    headers?: Record<string, string>;
  }): Promise<void> {
    const { baseURL, proxy, httpCredentials, headers } = config;

    // Tworzenie instancji kontekstu API z konfiguracją
    this.requestContext = await request.newContext({
      baseURL,
      proxy,
      httpCredentials,
      extraHTTPHeaders: headers || {}, // Dodanie opcjonalnych nagłówków
    });
  }

  // Metoda do wysyłania żądań POST
  async post(endpoint: string, data: Record<string, any>, headers?: Record<string, string>): Promise<any> {
    if (!this.requestContext) {
      throw new Error('API instance is not initialized. Call createInstance() first.');
    }

    // Wykonanie żądania POST
    const response = await this.requestContext.post(endpoint, {
      headers: {
        'Content-Type': 'application/json', // Domyślny nagłówek
        ...(headers || {}), // Dodanie dodatkowych nagłówków
      },
      data,
    });

    // Sprawdzenie odpowiedzi
    if (response.status() >= 400) {
      throw new Error(`Request failed with status ${response.status()}: ${await response.text()}`);
    }

    return response.json(); // Parsowanie odpowiedzi jako JSON
  }

  // Metoda do zamknięcia kontekstu API
  async dispose(): Promise<void> {
    if (this.requestContext) {
      await this.requestContext.dispose();
      this.requestContext = null;
    }
  }
}

// Przykład użycia
(async () => {
  const api = new API();

  try {
    // Konfiguracja API
    await api.createInstance({
      baseURL: 'https://example-api.com',
      proxy: {
        server: 'http://proxy-url:port',
        username: 'proxy-username',
        password: 'proxy-password',
      },
      httpCredentials: {
        username: 'api-username',
        password: 'api-password',
      },
      headers: {
        'Custom-Header': 'CustomValue', // Opcjonalne nagłówki globalne
      },
    });

    // Wysyłanie żądania POST
    const response = await api.post('/endpoint', {
      key1: 'value1',
      key2: 'value2',
    });

    console.log('Odpowiedź z API:', response);
  } catch (error) {
    console.error('Wystąpił błąd:', error);
  } finally {
    // Zakończenie pracy z API
    await api.dispose();
  }
})();
