import { APIRequestContext, request } from '@playwright/test';
import * as dotenv from 'dotenv';

dotenv.config();

class PageCreator {
  private apiRequestContext: APIRequestContext;
  private templateMap: Map<string, string>;

  constructor() {
    this.apiRequestContext = await request.newContext({
      baseURL: process.env.BASE_URL,
      httpCredentials: {
        username: process.env.AUTH_USERNAME || '',
        password: process.env.AUTH_PASSWORD || '',
      },
      proxy: {
        server: process.env.PROXY_SERVER || '',
        username: process.env.PROXY_USERNAME || '',
        password: process.env.PROXY_PASSWORD || '',
      },
    });

    this.templateMap = new Map<string, string>([
      ['Article Template', '/apps/dpws/templates/articlePage'],
      // Dodaj kolejne mapowania nazw szablonów na ścieżki
    ]);
  }

  public async createPage(
    templateName: string,
    parentPath: string,
    title: string,
    label: string
  ) {
    const templatePath = this.templateMap.get(templateName);
    if (!templatePath) {
      throw new Error(`Template name "${templateName}" not found in template map.`);
    }

    const response = await this.apiRequestContext.post('/bin/wcmcommand', {
      form: {
        templatePath,
        parentPath,
        shallow: 'true',
        cmd: 'createPage',
        title,
        label,
      },
    });

    if (!response.ok()) {
      throw new Error(`Failed to create page: ${response.status()} ${response.statusText()}`);
    }

    const responseBody = await response.json();
    return responseBody;
  }
}

// Przykładowe użycie:
(async () => {
  const pageCreator = new PageCreator();
  const response = await pageCreator.createPage(
    'Article Template',
    '/content/hsbc/hbqa/en_gb/automation/templates',
    'Playwright API test',
    'article-page-template'
  );
  console.log(response);
})();



// Definicja niestandardowego wyjątku
class TemplateNotFoundException extends Error {
  constructor(templateName: string) {
    super(`Szablon o nazwie "${templateName}" nie został znaleziony.`);
    this.name = 'TemplateNotFoundException';
  }
}

class TemplateManager {
  private templateMap: Map<string, string>;

  constructor() {
    this.templateMap = new Map<string, string>([
      ['Article Template', '/apps/dpws/templates/articlePage'],
      // Dodaj kolejne mapowania nazw szablonów na ścieżki
    ]);
  }

  public getTemplatePath(templateName: string): string {
    const templatePath = this.templateMap.get(templateName);
    if (!templatePath) {
      throw new TemplateNotFoundException(templateName);
    }
    return templatePath;
  }

  // Inne metody klasy
}

