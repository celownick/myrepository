import { test, expect } from '@playwright/test';
import { API } from './api'; // Zakładamy, że klasa API jest w pliku api.ts

test.describe('API POST Request Tests', () => {
  let api: API;

  // Ustawienia przed testami
  test.beforeAll(async () => {
    api = new API();

    // Konfiguracja instancji API
    await api.createInstance({
      baseURL: 'https://example-api.com',
      proxy: {
        server: 'http://proxy-url:port',
        username: 'proxy-username',
        password: 'proxy-password',
      },
      httpCredentials: {
        username: 'api-username',
        password: 'api-password',
      },
      headers: {
        'Custom-Header': 'CustomValue', // Opcjonalne globalne nagłówki
      },
    });
  });

  // Czyszczenie po testach
  test.afterAll(async () => {
    await api.dispose();
  });

  // Test poprawnego żądania POST
  test('should send a POST request and receive a valid response', async () => {
    const postData = {
      key1: 'value1',
      key2: 'value2',
    };

    // Wysłanie żądania POST
    const response = await api.post('/endpoint', postData);

    // Weryfikacja statusu odpowiedzi i danych
    expect(response).toBeTruthy();
    expect(response).toMatchObject({
      success: true, // Zakładamy, że odpowiedź zawiera pole success: true
      data: {
        key1: 'value1',
        key2: 'value2',
      },
    });
  });

  // Test błędnego żądania POST
  test('should handle an error response', async () => {
    const invalidPostData = {
      invalidKey: 'invalidValue',
    };

    let errorMessage = '';
    try {
      // Próba wysłania żądania z błędnymi danymi
      await api.post('/endpoint', invalidPostData);
    } catch (error) {
      errorMessage = (error as Error).message;
    }

    // Weryfikacja, czy odpowiedni błąd został zwrócony
    expect(errorMessage).toContain('Request failed with status');
  });
});
