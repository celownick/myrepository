import { test, expect } from '@playwright/test';
import axios, { AxiosRequestConfig } from 'axios';
import FormData from 'form-data';

class Api {
  private static instance: Api | null = null;
  private proxyConfig: any;
  private baseUrl: string;

  private constructor() {
    this.baseUrl = 'https://your-api-url.com';
    this.createInstance();
  }

  public static getInstance(): Api {
    if (!Api.instance) {
      Api.instance = new Api();
    }
    return Api.instance;
  }

  private createInstance() {
    const isJenkins = process.env.CI === 'true'; // Wykrywanie Å›rodowiska
    this.proxyConfig = {
      host: 'proxy.example.com',
      port: 8080,
      auth: {
        username: isJenkins ? process.env.JENKINS_USERNAME : process.env.LOCAL_USERNAME,
        password: isJenkins ? process.env.JENKINS_PASSWORD : process.env.LOCAL_PASSWORD,
      },
      protocol: 'http',
    };
  }

  async createPage() {
    const formData = new FormData();
    formData.append('templatePath', 'apps/dpws/');
    formData.append('parentPath', '/content/templates');

    const config: AxiosRequestConfig = {
      method: 'POST',
      url: `${this.baseUrl}/createPage`,
      data: formData,
      headers: formData.getHeaders(),
      proxy: this.proxyConfig,
    };

    const response = await axios(config);
    expect(response.status).toBe(200);
    return response.data;
  }

  async deletePage(pageId: string) {
    const config: AxiosRequestConfig = {
      method: 'DELETE',
      url: `${this.baseUrl}/deletePage/${pageId}`,
      proxy: this.proxyConfig,
    };

    const response = await axios(config);
    expect(response.status).toBe(200);
  }
}

test('API Test - Create and Delete Page', async ({}) => {
  const api = Api.getInstance();

  const pageData = await api.createPage();
  expect(pageData).toHaveProperty('id');

  await api.deletePage(pageData.id);
});
